<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[JavaScript]]></title>
      <url>http://dxtywt.github.io/2016/08/14/2016-08-14-javascript/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<h2 id="一、存在形式及位置"><a href="#一、存在形式及位置" class="headerlink" title="一、存在形式及位置"></a>一、存在形式及位置</h2><h3 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h3><p>1、外部文件引入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type&quot;text/javascript&quot; src=&quot;JS文件&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>2、html页面包含</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type&quot;text/javascript&quot;&gt;</div><div class="line">    Js代码内容</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><ul>
<li>HTML的head中</li>
<li>HTML的body代码块底部(推荐)</li>
</ul>
<blockquote>
<p>由于Html代码是从上到下执行，如果Head中的js代码耗时严重，就会导致用户长时间无法看到页面，如果放置在body代码块底部，那么即使js代码耗时严重，也不会影响用户看到页面效果，只是js实现特效慢而已</p>
</blockquote>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>JavaScript中代码注释：</p>
<pre><code>单行 //
多行 /*  */
</code></pre><h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><p>JavaScript中变量的声明是一个非常容易出错的点，局部变量必须一个 var 开头，如果未使用var，则默认表示声明的是全局变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    // 全局变量</div><div class="line">    name = &apos;seven&apos;;</div><div class="line"> </div><div class="line">    function func()&#123;</div><div class="line">        // 局部变量</div><div class="line">        var age = 18;</div><div class="line"> </div><div class="line">        // 全局变量</div><div class="line">        gender = &quot;男&quot;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var li = document.getElementsByClassName(&quot;hide&quot;);</div><div class="line">    for(var i in li)&#123;               //循环中的局部变量</div><div class="line">        li[i].style.display=&quot;block&quot;;</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h2><p>JavaScript 中的数据类型分为原始类型和对象类型：</p>
<p><strong>原始类型：</strong><code>数字</code>、<code>字符串</code>、<code>布尔值</code><br><strong>对象类型：</strong><code>数组</code>、<code>“字典”</code>、…<br><strong><em>特别的：</em></strong>数字、布尔值、null、undefined、字符串是不可变。<br><strong>null</strong> 是JavaScript语言的关键字，它表示一个特殊值，常用来描述“空值”。<br><strong>undefined</strong> 是一个特殊值，表示变量未定义。</p>
<h3 id="1、数字（Number）"><a href="#1、数字（Number）" class="headerlink" title="1、数字（Number）"></a>1、数字（Number）</h3><p>JavaScript中不区分整数值和浮点数值，JavaScript中所有数字均用浮点数值表示。</p>
<p>转换：</p>
<pre><code>parseInt(..)    将某值转换成数字，不成功则NaN
parseFloat(..) 将某值转换成浮点数，不成功则NaN
</code></pre><p>特殊值：</p>
<p><strong>NaN</strong>，非数字。可使用 isNaN(num) 来判断。<br><strong>Infinity</strong>，无穷大。可使用 isFinite(num) 来判断。<br>更多数值计算：</p>
<h3 id="2、字符串（String）"><a href="#2、字符串（String）" class="headerlink" title="2、字符串（String）"></a>2、字符串（String）</h3><p>字符串是由字符组成的数组，但在JavaScript中字符串是不可变的：可以访问字符串任意位置的文本，但是JavaScript并未提供修改已知字符串内容的方法。</p>
<p>常见功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">obj.length                           长度</div><div class="line">obj.trim()                           移除空白</div><div class="line">obj.trimLeft()</div><div class="line">obj.trimRight)</div><div class="line">obj.charAt(n)                        返回字符串中的第n个字符</div><div class="line">obj.concat(value, ...)               拼接</div><div class="line">obj.indexOf(substring,start)         子序列位置</div><div class="line">obj.lastIndexOf(substring,start)     子序列位置</div><div class="line">obj.substring(from, to)              根据索引获取子序列</div><div class="line">obj.slice(start, end)                切片</div><div class="line">obj.toLowerCase()                    大写</div><div class="line">obj.toUpperCase()                    小写</div><div class="line">obj.split(delimiter, limit)          分割</div><div class="line">obj.search(regexp)                   从头开始匹配，返回匹配成功的第一个位置(g无效)</div><div class="line">obj.match(regexp)                    全局搜索，如果正则中有g表示找到全部，否则只找到第一个。</div><div class="line">obj.replace(regexp, replacement)     替换，正则中有g则替换所有，否则只替换第一个匹配项，</div><div class="line">                                     $数字：匹配的第n个组内容；</div><div class="line">                                     $&amp;：当前匹配的内容；</div><div class="line">                                     $`：位于匹配子串左侧的文本；</div><div class="line">                                     $&apos;：位于匹配子串右侧的文本</div><div class="line">                                     $$：直接量$符号</div></pre></td></tr></table></figure>
<h3 id="3、布尔类型（Boolean）"><a href="#3、布尔类型（Boolean）" class="headerlink" title="3、布尔类型（Boolean）"></a>3、布尔类型（Boolean）</h3><p>布尔类型仅包含真假，与Python不同的是其首字母小写。</p>
<table>
<thead>
<tr>
<th style="text-align:center">表达式</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">比较值相等</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">===</td>
<td style="text-align:center">比较值和类型相</td>
</tr>
<tr>
<td style="text-align:center">!===</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">\</td>
<td></td>
<td>或</td>
</tr>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">且</td>
</tr>
</tbody>
</table>
<h3 id="4、数组"><a href="#4、数组" class="headerlink" title="4、数组"></a>4、数组</h3><p>JavaScript中的数组类似于Python中的列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">obj.length          数组的大小</div><div class="line">obj.push(ele)       尾部追加元素</div><div class="line">obj.pop()           尾部获取一个元素</div><div class="line">obj.unshift(ele)    头部插入元素</div><div class="line">obj.shift()         头部移除元素</div><div class="line">obj.splice(start, deleteCount, value, ...)  插入、删除或替换数组的元素</div><div class="line">                    obj.splice(n,0,val) 指定位置插入元素</div><div class="line">                    obj.splice(n,1,val) 指定位置替换元素</div><div class="line">                    obj.splice(n,1)     指定位置删除元素</div><div class="line">obj.slice( )        切片</div><div class="line">obj.reverse( )      反转</div><div class="line">obj.join(sep)       将数组元素连接起来以构建一个字符串</div><div class="line">obj.concat(val,..)  连接数组</div><div class="line">obj.sort( )         对数组元素进行排序</div></pre></td></tr></table></figure>
<h2 id="四、语句"><a href="#四、语句" class="headerlink" title="四、语句"></a>四、语句</h2><h3 id="1、条件语句"><a href="#1、条件语句" class="headerlink" title="1、条件语句"></a>1、条件语句</h3><p>if语句 # 注意加括号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if(条件)&#123;</div><div class="line"> </div><div class="line">    &#125;else if(条件)&#123;</div><div class="line">         </div><div class="line">    &#125;else&#123;</div><div class="line"> </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>switch语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">switch(name)&#123;</div><div class="line">     case &apos;1&apos;:</div><div class="line">         age = 123;</div><div class="line">         break;</div><div class="line">     case &apos;2&apos;:</div><div class="line">         age = 456;</div><div class="line">         break;</div><div class="line">     default :</div><div class="line">         age = 777;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="2、循环语句"><a href="#2、循环语句" class="headerlink" title="2、循环语句"></a>2、循环语句</h3><p>key 自增</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var names = [&quot;alex&quot;, &quot;tony&quot;, &quot;rain&quot;];</div><div class="line">for(var i=0;i&lt;names.length;i++)&#123;</div><div class="line">    console.log(i);</div><div class="line">    console.log(names[i]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>循环key</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var names = [&quot;alex&quot;, &quot;tony&quot;, &quot;rain&quot;];</div><div class="line">for(var index in names)&#123;</div><div class="line">    console.log(index);</div><div class="line">    console.log(names[index]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>条件触发</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while(条件)&#123;</div><div class="line">    // break;</div><div class="line">    // continue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、异常处理"><a href="#3、异常处理" class="headerlink" title="3、异常处理"></a>3、异常处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    //这段代码从上往下运行，其中任何一个语句抛出异常该代码块就结束运行</div><div class="line">&#125;</div><div class="line">catch (e) &#123;</div><div class="line">    // 如果try代码块中抛出了异常，catch代码块中的代码就会被执行。</div><div class="line">    //e是一个局部变量，用来指向Error对象或者其他抛出的对象</div><div class="line">&#125;</div><div class="line">finally &#123;</div><div class="line">     //无论try中代码是否有异常抛出（甚至是try代码块中有return语句），finally代码块中始终会被执行。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>主动跑出异常 throw Error(‘xxxx’)</p>
</blockquote>
<h2 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h2><h3 id="1、基本函数"><a href="#1、基本函数" class="headerlink" title="1、基本函数"></a>1、基本函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 普通函数</div><div class="line">    function func(arg)&#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">          </div><div class="line">// 匿名函数</div><div class="line">    var func = function(arg)&#123;</div><div class="line">        return &quot;tony&quot;;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">// 自执行函数</div><div class="line">    (function(arg)&#123;</div><div class="line">        console.log(arg);</div><div class="line">    &#125;)(&apos;123&apos;)</div></pre></td></tr></table></figure>
<blockquote>
<p>对于JavaScript中函数参数，实际参数的个数可能小于形式参数的个数，函数内的特殊值arguments中封装了所有实际参数。</p>
</blockquote>
<h3 id="2、作用域"><a href="#2、作用域" class="headerlink" title="2、作用域"></a>2、作用域</h3><p>JavaScript中每个函数都有自己的作用域，当出现函数嵌套时，就出现了作用域链。当内层函数使用变量时，会根据作用域链从内到外一层层的循环，如果不存在，则异常。</p>
<ol>
<li>JavaScript中无块级作用域</li>
<li>JavaScript采用函数作用域</li>
<li>JavaScript的作用域链，根据作用域链从内到外的优先级寻找，如果内层没有就逐步向上找，直到没找到抛出异常</li>
<li><strong>JavaScript的作用域链执行前已创建</strong></li>
<li>详细 <a href="http://www.cnblogs.com/wupeiqi/p/5649402.html" target="_blank" rel="external">http://www.cnblogs.com/wupeiqi/p/5649402.html</a></li>
</ol>
<h3 id="3、闭包"><a href="#3、闭包" class="headerlink" title="3、闭包"></a>3、闭包</h3><p>「闭包」，是指拥有多个变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p>
<p>闭包是个函数，而它「记住了周围发生了什么」。表现为由「一个函数」体中定义了「另一个函数」<br>由于作用域链只能从内向外找，默认外部无法获取函数内部变量。闭包，在外部获取函数内部的变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function f2()&#123;</div><div class="line">    var arg= [11,22];</div><div class="line">    function f3()&#123;</div><div class="line">        return arg;</div><div class="line">    &#125;</div><div class="line">    return f3;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">ret = f2();</div><div class="line">ret();</div></pre></td></tr></table></figure></the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Css小记]]></title>
      <url>http://dxtywt.github.io/2016/08/07/2016-08-07-css/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要="">

<p></p><h2 id="intro">前言</h2><br>css是英文Cascading Style Sheets的缩写,称为层叠样式表，定义如何显示 HTML 元素,用于对页面进行美化。<p></p>
<p>存在方式有三种(优先级依序)：</p>
<pre><code>1. 内联样式：在标签中使用 style=&apos;xx:xxx;&apos;
2. 内部样式表：在页面中嵌入 &lt; style type=&quot;text/css&quot;&gt; &lt;/style &gt; 块
3. 外部样式表：引入外部css文件
</code></pre><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h2><h3 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h3><pre><code>1. id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。 
2. HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 &quot;#&quot; 来定义。 
3. ID属性不要以数字开头，数字开头的ID在 Mozilla/Firefox 浏览器中不起作用。
</code></pre><h3 id="class-选择器"><a href="#class-选择器" class="headerlink" title="class 选择器"></a>class 选择器</h3><pre><code>1. class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。 
2. class选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点&quot;.&quot;号显示 
3. 类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。
</code></pre><p>Demo</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        /*标签选择器*/</div><div class="line">        div&#123;</div><div class="line">            background-color: red;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /*id选择器*/</div><div class="line">        #i1&#123;</div><div class="line">            background-color: aqua;</div><div class="line">            color: black;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /*class选择器*/</div><div class="line">        .c1&#123;</div><div class="line">            background-color: black;</div><div class="line">            color: white;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /*层级选择器*/</div><div class="line">        .c5 p a&#123;</div><div class="line">            background-color: yellow;</div><div class="line">            color: red;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /*组合选择器*/</div><div class="line">        .c2,.c3,.c4&#123;</div><div class="line">            background-color: black;</div><div class="line">            color: white;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试标签选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"i1"</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>class 选择器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c5"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span>&gt;</span></div><div class="line">                层级选择器</div><div class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c3"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c4"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="Backgrounds（背景）"><a href="#Backgrounds（背景）" class="headerlink" title="Backgrounds（背景）"></a>Backgrounds（背景）</h3><h4 id="background-color-背景颜色"><a href="#background-color-背景颜色" class="headerlink" title="background-color 背景颜色"></a>background-color 背景颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>:<span class="number">#b0c4de</span>;&#125;</div></pre></td></tr></table></figure>
<h4 id="background-image-背景图像"><a href="#background-image-背景图像" class="headerlink" title="background-image 背景图像"></a>background-image 背景图像</h4><p>默认情况下，背景图像进行平铺重复显示，以覆盖整个元素实体</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'paper.gif'</span>);&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">background-repeat</span>: </div><div class="line">    <span class="selector-tag">repeat-x</span>;  # 水平平铺</div><div class="line">    <span class="selector-tag">repeat-y</span>;  # 垂直平铺</div><div class="line">    <span class="selector-tag">no-repeat</span>;  # 不平铺</div></pre></td></tr></table></figure>
<h4 id="背景-简写属性"><a href="#背景-简写属性" class="headerlink" title="背景- 简写属性"></a>背景- 简写属性</h4><p>当使用简写属性时，属性值得顺序为：<br>background-color background-image background-repeat background-attachment background-position</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>:<span class="number">#ffffff</span> <span class="built_in">url</span>(<span class="string">'img_tree.png'</span>) no-repeat right top;&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">background</td>
<td style="text-align:center">简写属性，作用是将背景属性设置在一个声明中</td>
</tr>
<tr>
<td style="text-align:center">background-attachment</td>
<td style="text-align:center">背景图像是否固定或者随着页面的其余部分滚动。</td>
</tr>
<tr>
<td style="text-align:center">background-color</td>
<td style="text-align:center">设置元素的背景颜色。</td>
</tr>
<tr>
<td style="text-align:center">background-image</td>
<td style="text-align:center">把图像设置为背景。</td>
</tr>
<tr>
<td style="text-align:center">background-position</td>
<td style="text-align:center">设置背景图像的起始位置。</td>
</tr>
<tr>
<td style="text-align:center">background-repeat</td>
<td style="text-align:center">设置背景图像是否及如何重复。</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Text文本格式"><a href="#Text文本格式" class="headerlink" title="Text文本格式"></a>Text文本格式</h3><h4 id="color"><a href="#color" class="headerlink" title="color"></a>color</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">color</span>:blue;&#125;</div><div class="line"><span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>:<span class="number">#00ff00</span>;&#125;</div><div class="line"><span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>:<span class="built_in">rgb</span>(255,0,0);&#125;</div></pre></td></tr></table></figure>
<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">text-align</span>:</div><div class="line">    <span class="selector-tag">center</span> # 水平居中</div><div class="line">    <span class="selector-tag">right</span>\<span class="selector-tag">left</span>  # 左右  </div><div class="line">    <span class="selector-tag">justify</span> # 每一行被展开为宽度相等，左，右外边距是对齐</div></pre></td></tr></table></figure>
<h4 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a</span> &#123;<span class="attribute">text-decoration</span>:none;&#125;  # 去除<span class="selector-tag">a</span>标签链接地址下划线</div><div class="line"><span class="selector-tag">h3</span> &#123;<span class="attribute">text-decoration</span>:underline;&#125;  # 下划线</div></pre></td></tr></table></figure>
<h4 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">text-indent</span>:<span class="number">50px</span>;&#125;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">color</td>
<td style="text-align:center">设置文本颜色</td>
</tr>
<tr>
<td style="text-align:center">direction</td>
<td style="text-align:center">设置文本方向。</td>
</tr>
<tr>
<td style="text-align:center">letter-spacing</td>
<td style="text-align:center">设置字符间距</td>
</tr>
<tr>
<td style="text-align:center">line-height</td>
<td style="text-align:center">设置行高</td>
</tr>
<tr>
<td style="text-align:center">text-align</td>
<td style="text-align:center">对齐元素中的文本</td>
</tr>
<tr>
<td style="text-align:center">text-decoration</td>
<td style="text-align:center">向文本添加修饰</td>
</tr>
<tr>
<td style="text-align:center">text-indent</td>
<td style="text-align:center">缩进元素中文本的首行</td>
</tr>
<tr>
<td style="text-align:center">text-shadow</td>
<td style="text-align:center">设置文本阴影</td>
</tr>
<tr>
<td style="text-align:center">text-transform</td>
<td style="text-align:center">控制元素中的字母</td>
</tr>
<tr>
<td style="text-align:center">vertical-align</td>
<td style="text-align:center">设置元素的垂直对齐</td>
</tr>
<tr>
<td style="text-align:center">white-space</td>
<td style="text-align:center">设置元素中空白的处理方式</td>
</tr>
<tr>
<td style="text-align:center">word-spacing</td>
<td style="text-align:center">设置字间距</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Font-字体"><a href="#Font-字体" class="headerlink" title="Font 字体"></a>Font 字体</h3><table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">font</td>
<td style="text-align:center">在一个声明中设置所有的字体属性</td>
</tr>
<tr>
<td style="text-align:center">font-family</td>
<td style="text-align:center">指定文本的字体系列</td>
</tr>
<tr>
<td style="text-align:center">font-size</td>
<td style="text-align:center">指定文本的字体大小</td>
</tr>
<tr>
<td style="text-align:center">font-style</td>
<td style="text-align:center">指定文本的字体样式</td>
</tr>
<tr>
<td style="text-align:center">font-variant</td>
<td style="text-align:center">以小型大写字体或者正常字体显示文本。</td>
</tr>
<tr>
<td style="text-align:center">font-weight</td>
<td style="text-align:center">指定字体的粗细。</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">:link</td>
<td style="text-align:center">正常，未访问过的链接</td>
</tr>
<tr>
<td style="text-align:center">:visited</td>
<td style="text-align:center">用户已访问过的链接</td>
</tr>
<tr>
<td style="text-align:center">:hover</td>
<td style="text-align:center">当用户鼠标放在链接上时</td>
</tr>
<tr>
<td style="text-align:center">:active</td>
<td style="text-align:center">链接被点击的那一刻</td>
</tr>
<tr>
<td style="text-align:center">:before</td>
<td style="text-align:center">在元素之前插入内容</td>
</tr>
<tr>
<td style="text-align:center">:after</td>
<td style="text-align:center">在元素之后插入内容</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="盒子模型-Box-Model"><a href="#盒子模型-Box-Model" class="headerlink" title="盒子模型(Box Model)"></a>盒子模型(Box Model)</h3><table>
<thead>
<tr>
<th style="text-align:center">Property</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Margin（外边距）</td>
<td style="text-align:center">清除边框区域。Margin没有背景颜色，它是完全透明</td>
</tr>
<tr>
<td style="text-align:center">Border（边框）</td>
<td style="text-align:center">边框周围的填充和内容。边框是受到盒子的背景颜色影响</td>
</tr>
<tr>
<td style="text-align:center">Padding（内边距）</td>
<td style="text-align:center">清除内容周围的区域。会受到框中填充的背景颜色影响</td>
</tr>
<tr>
<td style="text-align:center">Content（内容）</td>
<td style="text-align:center">盒子的内容，显示文本和图像</td>
</tr>
</tbody>
</table>
<p><code>总元素的宽度</code>=宽度+左填充+右填充+左边框+右边框+左边距+右边距<br><code>总元素的高度</code>=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p>
<hr>
<h3 id="Display-显示-与-Visibility（可见性）"><a href="#Display-显示-与-Visibility（可见性）" class="headerlink" title="Display(显示) 与 Visibility（可见性）"></a>Display(显示) 与 Visibility（可见性）</h3><ul>
<li><p>visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。也就是说，该元素虽然被隐藏了，但仍然会影响布局。</p>
</li>
<li><p>display:none可以隐藏某个元素，且隐藏的元素不会占用任何空间。也就是说，该元素不但被隐藏了，而且该元素原本占用的空间也会从页面布局中消失。</p>
</li>
</ul>
<hr>
<h3 id="块-内联"><a href="#块-内联" class="headerlink" title="块 内联"></a>块 内联</h3><p>块元素是一个元素，占用了全部宽度，在前后都是换行符。<br>例： <code>&lt;h1&gt;</code> <code>&lt;p&gt;</code> <code>&lt;div&gt;</code><br>内联元素只需要必要的宽度，不强制换行。<br>例： <code>&lt;span&gt;</code> <code>&lt;a&gt;</code></p>
<p>display:inline; # 既有块标签属性， 又有内联标签属性<br>span {display:block;} # 把span元素作为块元素：</p>
<hr>
<h3 id="位置-position"><a href="#位置-position" class="headerlink" title="位置 position"></a>位置 position</h3><p>####Fixed </p>
<p>元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动</p>
<h4 id="absolute（绝对定位）"><a href="#absolute（绝对定位）" class="headerlink" title="absolute（绝对定位）"></a>absolute（绝对定位）</h4><p>absolute是生成觉对定位的元素，脱离了文本流（即在文档中已经不占据位置），参照浏览器的左上角通过top,right,bottom,left（简称TRBL） 定位。</p>
<h4 id="relative（相对定位）："><a href="#relative（相对定位）：" class="headerlink" title="relative（相对定位）："></a>relative（相对定位）：</h4><p>relative是相对的意思，顾名思义就是相对于元素本身在文档中应该出现的位置来移动这个元素，可以通过TRBL来移动元素的位置，实际上该元素依然占据文档中原有的位置，只是视觉上相对原来的位置有移动。</p>
<p>relative 与 absolute 配合使用，relative 定义一个块级标签位置，标签内的内容相对该标签固定</p>
<hr>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>clear:both;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">float  clearfix</div><div class="line"></div><div class="line">    .clearfix:after&#123;</div><div class="line">        content: &apos;.&apos;;</div><div class="line">        clear: both;</div><div class="line">        display: block;</div><div class="line">        visibility: hidden;</div><div class="line">        height: 0;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SQLAlchemy 操作]]></title>
      <url>http://dxtywt.github.io/2016/08/04/sqlalchemy/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<h2 id="SQLAlcemy"><a href="#SQLAlcemy" class="headerlink" title="SQLAlcemy"></a>SQLAlcemy</h2><p></p><h2 id="intro">前言</h2>SQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。<br><a id="more"></a><p></p>
<p><the rest="" of="" contents="" |="" 余下全文=""><br>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</the></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">MySQL-Python</div><div class="line">    mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</div><div class="line">  </div><div class="line">pymysql</div><div class="line">    mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</div><div class="line">  </div><div class="line">MySQL-Connector</div><div class="line">    mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</div><div class="line">  </div><div class="line">cx_Oracle</div><div class="line">    oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</div><div class="line">  </div><div class="line">更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html</div></pre></td></tr></table></figure>
<h3 id="一、底层处理"><a href="#一、底层处理" class="headerlink" title="一、底层处理"></a>一、底层处理</h3><p>使用 Engine/ConnectionPooling/Dialect 进行数据库操作，Engine使用ConnectionPooling连接数据库，然后再通过Dialect执行SQL语句。</p>
<p>传统方式，利用sqlalchemy连接数据库，执行sql</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"></div><div class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123@127.0.0.1:3306/t1"</span>, max_overflow=<span class="number">5</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 执行插入操作</span></div><div class="line">cur = engine.execute(</div><div class="line"> <span class="string">"INSERT INTO hosts (host, color_id) VALUES ('1.1.1.22', 3)"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># 插入多行</span></div><div class="line">cur = engine.execute(</div><div class="line"> <span class="string">"INSERT INTO hosts (host, color_id) VALUES(%s, %s)"</span>,[(<span class="string">'1.1.1.22'</span>, <span class="number">3</span>),(<span class="string">'1.1.1.221'</span>, <span class="number">3</span>),]</div><div class="line">)</div><div class="line"></div><div class="line">cur = engine.execute(</div><div class="line"> <span class="string">"INSERT INTO hosts (host, color_id) VALUES (%(host)s, %(color_id)s)"</span>,</div><div class="line"> host=<span class="string">'1.1.1.99'</span>, color_id=<span class="number">3</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment"># 执行SQL</span></div><div class="line">cur = engine.execute(<span class="string">'select * from hosts'</span>)</div><div class="line"><span class="comment"># 获取第一行数据</span></div><div class="line">cur.fetchone()</div><div class="line"><span class="comment"># 获取第n行数据</span></div><div class="line">cur.fetchmany(<span class="number">3</span>)</div><div class="line"><span class="comment"># 获取所有数据</span></div><div class="line">cur.fetchall()</div></pre></td></tr></table></figure>
<h3 id="二、ORM功能使用"><a href="#二、ORM功能使用" class="headerlink" title="二、ORM功能使用"></a>二、ORM功能使用</h3><p>使用 ORM/Schema Type/SQL Expression Language/Engine/ConnectionPooling/Dialect 所有组件对数据进行操作。根据类创建对象，对象转换成SQL，执行SQL。</p>
<blockquote>
<p>通过类和对象操作数据库</p>
</blockquote>
<h4 id="1、自动生成表"><a href="#1、自动生成表" class="headerlink" title="1、自动生成表"></a>1、自动生成表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"></div><div class="line"><span class="comment"># 建立连接的engine，通过engine连接数据库</span></div><div class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123@127.0.0.1:3306/t1"</span>, max_overflow=<span class="number">5</span>)</div><div class="line"></div><div class="line">Base = declarative_base()</div><div class="line"></div><div class="line"><span class="comment"># 创建单表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>，nullable=<span class="keyword">False</span>) <span class="comment"># 主键，非空</span></div><div class="line">    name = Column(String(<span class="number">32</span>))</div><div class="line">    extra = Column(String(<span class="number">16</span>))</div><div class="line">    </div><div class="line">    <span class="comment"># 唯一约束</span></div><div class="line">    __table_args__ = (</div><div class="line">    UniqueConstraint(<span class="string">'id'</span>, <span class="string">'name'</span>, name=<span class="string">'uix_id_name'</span>),</div><div class="line">        Index(<span class="string">'ix_id_name'</span>, <span class="string">'name'</span>, <span class="string">'extra'</span>),</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment"># 一对多</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Favor</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'favor'</span></div><div class="line">    nid = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    caption = Column(String(<span class="number">50</span>), default=<span class="string">'red'</span>, unique=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'person'</span></div><div class="line">    nid = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">32</span>), index=<span class="keyword">True</span>, nullable=<span class="keyword">True</span>)</div><div class="line">    <span class="comment"># 外键约束，与生成表结构无关，仅用于查询方便</span></div><div class="line">    favor_id = Column(Integer, ForeignKey(<span class="string">"favor.nid"</span>))  </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 多对多</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'group'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">64</span>), unique=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>)</div><div class="line">    port = Column(Integer, default=<span class="number">22</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'server'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</div><div class="line">    hostname = Column(String(<span class="number">64</span>), unique=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># 多对多,另建一张关系表，来关联两张表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerToGroup</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'servertogroup'</span></div><div class="line">    nid = Column(Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</div><div class="line">    server_id = Column(Integer, ForeignKey(<span class="string">'server.id'</span>))</div><div class="line">    group_id = Column(Integer, ForeignKey(<span class="string">'group.id'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 执行建表操作</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></div><div class="line">    Base.metadata.create_all(engine)</div><div class="line"></div><div class="line"><span class="comment"># 执行删表操作</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span><span class="params">()</span>:</span></div><div class="line">    Base.metadata.drop_all(engine)</div></pre></td></tr></table></figure>
<h4 id="2、使用类操作表"><a href="#2、使用类操作表" class="headerlink" title="2、使用类操作表"></a>2、使用类操作表</h4><p><strong>增</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">obj = Users(name=&quot;alex0&quot;, extra=&apos;sb&apos;)</div><div class="line">session.add(obj)</div><div class="line">session.add_all([</div><div class="line">    Users(name=&quot;alex1&quot;, extra=&apos;sb&apos;),</div><div class="line">    Users(name=&quot;alex2&quot;, extra=&apos;sb&apos;),</div><div class="line">])</div><div class="line">session.commit()  # 事务操作</div></pre></td></tr></table></figure>
<p><strong>删</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">session.query(Users).filter(Users.id &gt; 2).delete()</div><div class="line">session.commit()</div></pre></td></tr></table></figure>
<p><strong>改</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">session.query(Users).filter(Users.id &gt; 2).update(&#123;&quot;name&quot; : &quot;099&quot;&#125;)</div><div class="line">session.query(Users).filter(Users.id &gt; 2).update(&#123;Users.name: Users.name + &quot;099&quot;&#125;, synchronize_session=False)</div><div class="line">session.query(Users).filter(Users.id &gt; 2).update(&#123;&quot;num&quot;: Users.num + 1&#125;, synchronize_session=&quot;evaluate&quot;)</div><div class="line">session.commit()</div></pre></td></tr></table></figure>
<p><strong>查</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ret = session.query(Users).all()</div><div class="line">ret = session.query(Users.name, Users.extra).all()</div><div class="line">ret = session.query(Users).filter_by(name=&apos;alex&apos;).all()</div><div class="line">ret = session.query(Users).filter_by(name=&apos;alex&apos;).first()</div></pre></td></tr></table></figure>
<p><strong>其他</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">#　条件</div><div class="line">ret = session.query(Users).filter_by(name=&apos;alex&apos;).all()</div><div class="line">ret = session.query(Users).filter(Users.id &gt; 1, Users.name == &apos;eric&apos;).all()</div><div class="line">ret = session.query(Users).filter(Users.id.between(1, 3), Users.name == &apos;eric&apos;).all()</div><div class="line">ret = session.query(Users).filter(Users.id.in_([1,3,4])).all()</div><div class="line">ret = session.query(Users).filter(~Users.id.in_([1,3,4])).all()</div><div class="line">ret = session.query(Users).filter(Users.id.in_(session.query(Users.id).filter_by(name=&apos;eric&apos;))).all()</div><div class="line">from sqlalchemy import and_, or_</div><div class="line">ret = session.query(Users).filter(and_(Users.id &gt; 3, Users.name == &apos;eric&apos;)).all()</div><div class="line">ret = session.query(Users).filter(or_(Users.id &lt; 2, Users.name == &apos;eric&apos;)).all()</div><div class="line">ret = session.query(Users).filter(</div><div class="line">    or_(</div><div class="line">        Users.id &lt; 2,</div><div class="line">        and_(Users.name == &apos;eric&apos;, Users.id &gt; 3),</div><div class="line">        Users.extra != &quot;&quot;</div><div class="line">    )).all()</div><div class="line"></div><div class="line"></div><div class="line"># 通配符</div><div class="line">ret = session.query(Users).filter(Users.name.like(&apos;e%&apos;)).all()</div><div class="line">ret = session.query(Users).filter(~Users.name.like(&apos;e%&apos;)).all()</div><div class="line"></div><div class="line"># 限制</div><div class="line">ret = session.query(Users)[1:2]</div><div class="line"></div><div class="line"># 排序</div><div class="line">ret = session.query(Users).order_by(Users.name.desc()).all()</div><div class="line">ret = session.query(Users).order_by(Users.name.desc(), Users.id.asc()).all()</div><div class="line"></div><div class="line"># 分组</div><div class="line">from sqlalchemy.sql import func</div><div class="line"></div><div class="line">ret = session.query(Users).group_by(Users.extra).all()</div><div class="line">ret = session.query(</div><div class="line">    func.max(Users.id),</div><div class="line">    func.sum(Users.id),</div><div class="line">    func.min(Users.id)).group_by(Users.name).all()</div><div class="line"></div><div class="line">ret = session.query(</div><div class="line">    func.max(Users.id),</div><div class="line">    func.sum(Users.id),</div><div class="line">    func.min(Users.id)).group_by(Users.name).having(func.min(Users.id) &gt;2).all()</div><div class="line"></div><div class="line"># 连表</div><div class="line"></div><div class="line">ret = session.query(Users, Favor).filter(Users.id == Favor.nid).all()</div><div class="line"></div><div class="line">ret = session.query(Person).join(Favor).all()</div><div class="line"></div><div class="line">ret = session.query(Person).join(Favor, isouter=True).all()</div><div class="line"></div><div class="line"></div><div class="line"># 组合</div><div class="line">q1 = session.query(Users.name).filter(Users.id &gt; 2)</div><div class="line">q2 = session.query(Favor.caption).filter(Favor.nid &lt; 2)</div><div class="line">ret = q1.union(q2).all()</div><div class="line"></div><div class="line">q1 = session.query(Users.name).filter(Users.id &gt; 2)</div><div class="line">q2 = session.query(Favor.caption).filter(Favor.nid &lt; 2)</div><div class="line">ret = q1.union_all(q2).all()</div></pre></td></tr></table></figure>
<p><code>__repr__</code> 自定义查询表的返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">	__tablename__ = <span class="string">'user'</span></div><div class="line">	id = Column(Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</div><div class="line">	name = Column(String(<span class="number">64</span>),unique=<span class="keyword">True</span>,nullable=<span class="keyword">False</span>)   </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">		tmp = <span class="string">"%s - %s"</span> % (self.name,self.id)</div><div class="line">		<span class="keyword">return</span> tmp</div><div class="line">		</div><div class="line">ss = sessionmaker(bind=engine)</div><div class="line">session = ss()</div><div class="line"></div><div class="line">ret = session.query(User).filter(User.id==<span class="number">1</span>).all()</div><div class="line">print(users)</div><div class="line"><span class="comment"># 以__repr__函数定义的格式返回</span></div><div class="line">jack - <span class="number">1</span></div></pre></td></tr></table></figure>
<p><code>relationship</code> 关系</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(Base)</span>:</span></div><div class="line">	__tablename__ = <span class="string">'group'</span>                                     <span class="comment"># 用户组表</span></div><div class="line">	id = Column(Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)    <span class="comment"># 自增id</span></div><div class="line">	name = Column(String(<span class="number">64</span>),unique=<span class="keyword">True</span>,nullable=<span class="keyword">False</span>)        <span class="comment"># 用户组名</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">	__tablename__ = <span class="string">'user'</span>                                      <span class="comment"># 堡垒机用户表</span></div><div class="line">	id = Column(Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)    <span class="comment"># 自增id</span></div><div class="line">	name = Column(String(<span class="number">64</span>),unique=<span class="keyword">True</span>,nullable=<span class="keyword">False</span>)        <span class="comment"># 用户名</span></div><div class="line">	password = Column(String(<span class="number">255</span>))                              <span class="comment"># 账户密码</span></div><div class="line">	group_id = Column(Integer,ForeignKey(<span class="string">'group.id'</span>))           <span class="comment"># 所属组id</span></div><div class="line">	group = relationship(<span class="string">'Group'</span>,backref=<span class="string">'uuu'</span>)</div><div class="line">	<span class="comment"># 这里相当于为user增加一项，user.group 为user所属主的对象</span></div><div class="line">	</div><div class="line">    <span class="comment">############## （正向查询） #############</span></div><div class="line">    <span class="comment"># obj 代指user表的每一行</span></div><div class="line">    obj.group 代指group对象</div><div class="line">    obj = session.query(User).all()</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> obj:</div><div class="line">    	print(item.group.name)</div><div class="line">    </div><div class="line">    <span class="comment">############## （反向查询） #############</span></div><div class="line">    </div><div class="line">    obj1 = session.query(Group).filter(Group.name == <span class="string">'vv'</span>).first()</div><div class="line">    <span class="comment"># obj1为一个group对象</span></div><div class="line">    <span class="comment"># backref 就是为group表对应的增加了一个对象列，group.uuu就是对应group的host对象列表</span></div><div class="line">    print(obj1.uuu)</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> obj1.uuu:</div><div class="line">    	print(key.name)</div></pre></td></tr></table></figure>
<h4 id="3、多种查询对比"><a href="#3、多种查询对比" class="headerlink" title="3、多种查询对比"></a>3、多种查询对比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"># 方式一：</div><div class="line">host_obj = session.query(Host).filter(Host.hostname==&apos;c1&apos;).first()</div><div class="line">host_2_host_user = session.query(HostToHostUser.host_user_id).filter(HostToHostUser.host_id==host_obj.nid).all()</div><div class="line"></div><div class="line">r = zip(*host_2_host_user)</div><div class="line"></div><div class="line">users = session.query(HostUser.username).filter(HostUser.nid.in_(list(r)[0])).all()</div><div class="line">print(users)</div><div class="line"></div><div class="line"># 方式二：</div><div class="line">session.query(HostUser.username).filter(HostUser.nid.in_(session.query(HostToHostUser.host_user_id).filter(HostToHostUser.host_id == session.query(Host.nid).filter(Host.hostname == &apos;c1&apos;))))</div><div class="line"></div><div class="line"># 方式三 建立多个relationsh：</div><div class="line">host_obj = session.query(Host).filter(Host.hostname==&apos;c1&apos;).first()</div><div class="line">for item in host_obj.h:</div><div class="line">	print(item.host_user.username)</div><div class="line">	</div><div class="line"># 方式四：</div><div class="line">关系表写成table对象，关系表必须写在最上面</div><div class="line"></div><div class="line"># 定义表</div><div class="line">class HostToHostUser(Base):</div><div class="line">	__tablename__ = &apos;host_to_host_user&apos;</div><div class="line">	nid = Column(Integer, primary_key=True,autoincrement=True)</div><div class="line"></div><div class="line">	host_id = Column(Integer,ForeignKey(&apos;host.nid&apos;))</div><div class="line">	host_user_id = Column(Integer,ForeignKey(&apos;host_user.nid&apos;))</div><div class="line"></div><div class="line">class Host(Base):</div><div class="line">	__tablename__ = &apos;host&apos;</div><div class="line">	nid = Column(Integer, primary_key=True,autoincrement=True)</div><div class="line">	hostname = Column(String(32))</div><div class="line">	port = Column(String(32))</div><div class="line">	ip = Column(String(32))</div><div class="line">	host_user = relationship(&apos;HostUser&apos;,secondary=HostToHostUser.__table__,backref=&apos;h&apos;)</div><div class="line"></div><div class="line">class HostUser(Base):</div><div class="line">	__tablename__ = &apos;host_user&apos;</div><div class="line">	nid = Column(Integer, primary_key=True,autoincrement=True)</div><div class="line">	username = Column(String(32))</div><div class="line"></div><div class="line"># 查询</div><div class="line">host_obj = session.query(Host).filter(Host.hostname==&apos;c1&apos;).first()</div><div class="line">for item in host_obj.host_user:</div><div class="line">	print(item.username)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql ORM 框架 SQLAlcemy 应用]]></title>
      <url>http://dxtywt.github.io/2016/07/31/2016-07-31-sqlalchmey/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> 

<p>SQLAlchemy是Python编程语言下的一款ORM框架，该框架建立在数据库API之上，使用关系对象映射进行数据库操作，简言之便是：将对象转换成SQL，然后使用数据API执行SQL并获取执行结果。</p>
<p>SQLAlchemy本身无法操作数据库，其必须以来pymsql等第三方插件，Dialect用于和数据API进行交流，根据配置文件的不同调用不同的数据库API，从而实现对数据库的操作，如：</p>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">MySQL-Python</div><div class="line">    mysql+mysqldb://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</div><div class="line">  </div><div class="line">pymysql</div><div class="line">    mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;[?&lt;options&gt;]</div><div class="line">  </div><div class="line">MySQL-Connector</div><div class="line">    mysql+mysqlconnector://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;[:&lt;port&gt;]/&lt;dbname&gt;</div><div class="line">  </div><div class="line">cx_Oracle</div><div class="line">    oracle+cx_oracle://user:pass@host:port/dbname[?key=value&amp;key=value...]</div><div class="line">  </div><div class="line">更多详见：http://docs.sqlalchemy.org/en/latest/dialects/index.html</div></pre></td></tr></table></figure>
<h3 id="一、底层处理"><a href="#一、底层处理" class="headerlink" title="一、底层处理"></a>一、底层处理</h3><p>使用 Engine/ConnectionPooling/Dialect 进行数据库操作，Engine使用ConnectionPooling连接数据库，然后再通过Dialect执行SQL语句。</p>
<p>传统方式，利用sqlalchemy连接数据库，执行sql</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"></div><div class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123@127.0.0.1:3306/t1"</span>, max_overflow=<span class="number">5</span>)</div><div class="line"> </div><div class="line"><span class="comment"># 执行插入操作</span></div><div class="line">cur = engine.execute(</div><div class="line"> <span class="string">"INSERT INTO hosts (host, color_id) VALUES ('1.1.1.22', 3)"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment"># 插入多行</span></div><div class="line">cur = engine.execute(</div><div class="line"> <span class="string">"INSERT INTO hosts (host, color_id) VALUES(%s, %s)"</span>,[(<span class="string">'1.1.1.22'</span>, <span class="number">3</span>),(<span class="string">'1.1.1.221'</span>, <span class="number">3</span>),]</div><div class="line">)</div><div class="line"></div><div class="line">cur = engine.execute(</div><div class="line"> <span class="string">"INSERT INTO hosts (host, color_id) VALUES (%(host)s, %(color_id)s)"</span>,</div><div class="line"> host=<span class="string">'1.1.1.99'</span>, color_id=<span class="number">3</span></div><div class="line">)</div><div class="line"> </div><div class="line"><span class="comment"># 执行SQL</span></div><div class="line">cur = engine.execute(<span class="string">'select * from hosts'</span>)</div><div class="line"><span class="comment"># 获取第一行数据</span></div><div class="line">cur.fetchone()</div><div class="line"><span class="comment"># 获取第n行数据</span></div><div class="line">cur.fetchmany(<span class="number">3</span>)</div><div class="line"><span class="comment"># 获取所有数据</span></div><div class="line">cur.fetchall()</div></pre></td></tr></table></figure>
<h3 id="二、ORM功能使用"><a href="#二、ORM功能使用" class="headerlink" title="二、ORM功能使用"></a>二、ORM功能使用</h3><p>使用 ORM/Schema Type/SQL Expression Language/Engine/ConnectionPooling/Dialect 所有组件对数据进行操作。根据类创建对象，对象转换成SQL，执行SQL。</p>
<blockquote>
<p>通过类和对象操作数据库</p>
</blockquote>
<h4 id="1、自动生成表"><a href="#1、自动生成表" class="headerlink" title="1、自动生成表"></a>1、自动生成表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, ForeignKey, UniqueConstraint, Index</div><div class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker, relationship</div><div class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</div><div class="line"></div><div class="line"><span class="comment"># 建立连接的engine，通过engine连接数据库</span></div><div class="line">engine = create_engine(<span class="string">"mysql+pymysql://root:123@127.0.0.1:3306/t1"</span>, max_overflow=<span class="number">5</span>)</div><div class="line"></div><div class="line">Base = declarative_base()</div><div class="line"></div><div class="line"><span class="comment"># 创建单表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'users'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>，nullable=<span class="keyword">False</span>) <span class="comment"># 主键，非空</span></div><div class="line">    name = Column(String(<span class="number">32</span>))</div><div class="line">    extra = Column(String(<span class="number">16</span>))</div><div class="line">    </div><div class="line">    <span class="comment"># 唯一约束</span></div><div class="line">    __table_args__ = (</div><div class="line">    UniqueConstraint(<span class="string">'id'</span>, <span class="string">'name'</span>, name=<span class="string">'uix_id_name'</span>),</div><div class="line">        Index(<span class="string">'ix_id_name'</span>, <span class="string">'name'</span>, <span class="string">'extra'</span>),</div><div class="line">    )</div><div class="line"></div><div class="line"><span class="comment"># 一对多</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Favor</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'favor'</span></div><div class="line">    nid = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    caption = Column(String(<span class="number">50</span>), default=<span class="string">'red'</span>, unique=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'person'</span></div><div class="line">    nid = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">32</span>), index=<span class="keyword">True</span>, nullable=<span class="keyword">True</span>)</div><div class="line">    <span class="comment"># 外键约束，与生成表结构无关，仅用于查询方便</span></div><div class="line">    favor_id = Column(Integer, ForeignKey(<span class="string">"favor.nid"</span>))  </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 多对多</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'group'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">64</span>), unique=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>)</div><div class="line">    port = Column(Integer, default=<span class="number">22</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'server'</span></div><div class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</div><div class="line">    hostname = Column(String(<span class="number">64</span>), unique=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>)</div><div class="line"></div><div class="line"><span class="comment"># 多对多,另建一张关系表，来关联两张表</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerToGroup</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'servertogroup'</span></div><div class="line">    nid = Column(Integer, primary_key=<span class="keyword">True</span>, autoincrement=<span class="keyword">True</span>)</div><div class="line">    server_id = Column(Integer, ForeignKey(<span class="string">'server.id'</span>))</div><div class="line">    group_id = Column(Integer, ForeignKey(<span class="string">'group.id'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 执行建表操作</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_db</span><span class="params">()</span>:</span></div><div class="line">    Base.metadata.create_all(engine)</div><div class="line"></div><div class="line"><span class="comment"># 执行删表操作</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">drop_db</span><span class="params">()</span>:</span></div><div class="line">    Base.metadata.drop_all(engine)</div></pre></td></tr></table></figure>
<h4 id="2、使用类操作表"><a href="#2、使用类操作表" class="headerlink" title="2、使用类操作表"></a>2、使用类操作表</h4><p><strong>增</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">obj = Users(name=&quot;alex0&quot;, extra=&apos;sb&apos;)</div><div class="line">session.add(obj)</div><div class="line">session.add_all([</div><div class="line">    Users(name=&quot;alex1&quot;, extra=&apos;sb&apos;),</div><div class="line">    Users(name=&quot;alex2&quot;, extra=&apos;sb&apos;),</div><div class="line">])</div><div class="line">session.commit()  # 事务操作</div></pre></td></tr></table></figure>
<p><strong>删</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">session.query(Users).filter(Users.id &gt; 2).delete()</div><div class="line">session.commit()</div></pre></td></tr></table></figure>
<p><strong>改</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">session.query(Users).filter(Users.id &gt; 2).update(&#123;&quot;name&quot; : &quot;099&quot;&#125;)</div><div class="line">session.query(Users).filter(Users.id &gt; 2).update(&#123;Users.name: Users.name + &quot;099&quot;&#125;, synchronize_session=False)</div><div class="line">session.query(Users).filter(Users.id &gt; 2).update(&#123;&quot;num&quot;: Users.num + 1&#125;, synchronize_session=&quot;evaluate&quot;)</div><div class="line">session.commit()</div></pre></td></tr></table></figure>
<p><strong>查</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ret = session.query(Users).all()</div><div class="line">ret = session.query(Users.name, Users.extra).all()</div><div class="line">ret = session.query(Users).filter_by(name=&apos;alex&apos;).all()</div><div class="line">ret = session.query(Users).filter_by(name=&apos;alex&apos;).first()</div></pre></td></tr></table></figure>
<p><strong>其他</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">#　条件</div><div class="line">ret = session.query(Users).filter_by(name=&apos;alex&apos;).all()</div><div class="line">ret = session.query(Users).filter(Users.id &gt; 1, Users.name == &apos;eric&apos;).all()</div><div class="line">ret = session.query(Users).filter(Users.id.between(1, 3), Users.name == &apos;eric&apos;).all()</div><div class="line">ret = session.query(Users).filter(Users.id.in_([1,3,4])).all()</div><div class="line">ret = session.query(Users).filter(~Users.id.in_([1,3,4])).all()</div><div class="line">ret = session.query(Users).filter(Users.id.in_(session.query(Users.id).filter_by(name=&apos;eric&apos;))).all()</div><div class="line">from sqlalchemy import and_, or_</div><div class="line">ret = session.query(Users).filter(and_(Users.id &gt; 3, Users.name == &apos;eric&apos;)).all()</div><div class="line">ret = session.query(Users).filter(or_(Users.id &lt; 2, Users.name == &apos;eric&apos;)).all()</div><div class="line">ret = session.query(Users).filter(</div><div class="line">    or_(</div><div class="line">        Users.id &lt; 2,</div><div class="line">        and_(Users.name == &apos;eric&apos;, Users.id &gt; 3),</div><div class="line">        Users.extra != &quot;&quot;</div><div class="line">    )).all()</div><div class="line"></div><div class="line"></div><div class="line"># 通配符</div><div class="line">ret = session.query(Users).filter(Users.name.like(&apos;e%&apos;)).all()</div><div class="line">ret = session.query(Users).filter(~Users.name.like(&apos;e%&apos;)).all()</div><div class="line"></div><div class="line"># 限制</div><div class="line">ret = session.query(Users)[1:2]</div><div class="line"></div><div class="line"># 排序</div><div class="line">ret = session.query(Users).order_by(Users.name.desc()).all()</div><div class="line">ret = session.query(Users).order_by(Users.name.desc(), Users.id.asc()).all()</div><div class="line"></div><div class="line"># 分组</div><div class="line">from sqlalchemy.sql import func</div><div class="line"></div><div class="line">ret = session.query(Users).group_by(Users.extra).all()</div><div class="line">ret = session.query(</div><div class="line">    func.max(Users.id),</div><div class="line">    func.sum(Users.id),</div><div class="line">    func.min(Users.id)).group_by(Users.name).all()</div><div class="line"></div><div class="line">ret = session.query(</div><div class="line">    func.max(Users.id),</div><div class="line">    func.sum(Users.id),</div><div class="line">    func.min(Users.id)).group_by(Users.name).having(func.min(Users.id) &gt;2).all()</div><div class="line"></div><div class="line"># 连表</div><div class="line"></div><div class="line">ret = session.query(Users, Favor).filter(Users.id == Favor.nid).all()</div><div class="line"></div><div class="line">ret = session.query(Person).join(Favor).all()</div><div class="line"></div><div class="line">ret = session.query(Person).join(Favor, isouter=True).all()</div><div class="line"></div><div class="line"></div><div class="line"># 组合</div><div class="line">q1 = session.query(Users.name).filter(Users.id &gt; 2)</div><div class="line">q2 = session.query(Favor.caption).filter(Favor.nid &lt; 2)</div><div class="line">ret = q1.union(q2).all()</div><div class="line"></div><div class="line">q1 = session.query(Users.name).filter(Users.id &gt; 2)</div><div class="line">q2 = session.query(Favor.caption).filter(Favor.nid &lt; 2)</div><div class="line">ret = q1.union_all(q2).all()</div></pre></td></tr></table></figure>
<p><code>__repr__</code> 自定义查询表的返回</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'user'</span></div><div class="line">    id = Column(Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)</div><div class="line">    name = Column(String(<span class="number">64</span>),unique=<span class="keyword">True</span>,nullable=<span class="keyword">False</span>)   </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        tmp = <span class="string">"%s - %s"</span> % (self.name,self.id)</div><div class="line">        <span class="keyword">return</span> tmp</div><div class="line">        </div><div class="line">ss = sessionmaker(bind=engine)</div><div class="line">session = ss()</div><div class="line"></div><div class="line">ret = session.query(User).filter(User.id==<span class="number">1</span>).all()</div><div class="line">print(users)</div><div class="line"><span class="comment"># 以__repr__函数定义的格式返回</span></div><div class="line">jack - <span class="number">1</span></div></pre></td></tr></table></figure>
<p><code>relationship</code> 关系</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'group'</span>                                     <span class="comment"># 用户组表</span></div><div class="line">    id = Column(Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)    <span class="comment"># 自增id</span></div><div class="line">    name = Column(String(<span class="number">64</span>),unique=<span class="keyword">True</span>,nullable=<span class="keyword">False</span>)        <span class="comment"># 用户组名</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></div><div class="line">    __tablename__ = <span class="string">'user'</span>                                      <span class="comment"># 堡垒机用户表</span></div><div class="line">    id = Column(Integer,primary_key=<span class="keyword">True</span>,autoincrement=<span class="keyword">True</span>)    <span class="comment"># 自增id</span></div><div class="line">    name = Column(String(<span class="number">64</span>),unique=<span class="keyword">True</span>,nullable=<span class="keyword">False</span>)        <span class="comment"># 用户名</span></div><div class="line">    password = Column(String(<span class="number">255</span>))                              <span class="comment"># 账户密码</span></div><div class="line">    group_id = Column(Integer,ForeignKey(<span class="string">'group.id'</span>))           <span class="comment"># 所属组id</span></div><div class="line">    group = relationship(<span class="string">'Group'</span>,backref=<span class="string">'uuu'</span>)</div><div class="line">    <span class="comment"># 这里相当于为user增加一项，user.group 为user所属主的对象</span></div><div class="line">    </div><div class="line">    <span class="comment">############## （正向查询） #############</span></div><div class="line">    <span class="comment"># obj 代指user表的每一行</span></div><div class="line">    obj.group 代指group对象</div><div class="line">    obj = session.query(User).all()</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> obj:</div><div class="line">        print(item.group.name)</div><div class="line">    </div><div class="line">    <span class="comment">############## （反向查询） #############</span></div><div class="line">    </div><div class="line">    obj1 = session.query(Group).filter(Group.name == <span class="string">'vv'</span>).first()</div><div class="line">    <span class="comment"># obj1为一个group对象</span></div><div class="line">    <span class="comment"># backref 就是为group表对应的增加了一个对象列，group.uuu就是对应group的host对象列表</span></div><div class="line">    print(obj1.uuu)</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> obj1.uuu:</div><div class="line">        print(key.name)</div></pre></td></tr></table></figure>
<h4 id="3、多种查询对比"><a href="#3、多种查询对比" class="headerlink" title="3、多种查询对比"></a>3、多种查询对比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"># 方式一：</div><div class="line">host_obj = session.query(Host).filter(Host.hostname==&apos;c1&apos;).first()</div><div class="line">host_2_host_user = session.query(HostToHostUser.host_user_id).filter(HostToHostUser.host_id==host_obj.nid).all()</div><div class="line"></div><div class="line">r = zip(*host_2_host_user)</div><div class="line"></div><div class="line">users = session.query(HostUser.username).filter(HostUser.nid.in_(list(r)[0])).all()</div><div class="line">print(users)</div><div class="line"></div><div class="line"># 方式二：</div><div class="line">session.query(HostUser.username).filter(HostUser.nid.in_(session.query(HostToHostUser.host_user_id).filter(HostToHostUser.host_id == session.query(Host.nid).filter(Host.hostname == &apos;c1&apos;))))</div><div class="line"></div><div class="line"># 方式三 建立多个relationsh：</div><div class="line">host_obj = session.query(Host).filter(Host.hostname==&apos;c1&apos;).first()</div><div class="line">for item in host_obj.h:</div><div class="line">    print(item.host_user.username)</div><div class="line">    </div><div class="line"># 方式四：</div><div class="line">关系表写成table对象，关系表必须写在最上面</div><div class="line"></div><div class="line"># 定义表</div><div class="line">class HostToHostUser(Base):</div><div class="line">    __tablename__ = &apos;host_to_host_user&apos;</div><div class="line">    nid = Column(Integer, primary_key=True,autoincrement=True)</div><div class="line"></div><div class="line">    host_id = Column(Integer,ForeignKey(&apos;host.nid&apos;))</div><div class="line">    host_user_id = Column(Integer,ForeignKey(&apos;host_user.nid&apos;))</div><div class="line"></div><div class="line">class Host(Base):</div><div class="line">    __tablename__ = &apos;host&apos;</div><div class="line">    nid = Column(Integer, primary_key=True,autoincrement=True)</div><div class="line">    hostname = Column(String(32))</div><div class="line">    port = Column(String(32))</div><div class="line">    ip = Column(String(32))</div><div class="line">    host_user = relationship(&apos;HostUser&apos;,secondary=HostToHostUser.__table__,backref=&apos;h&apos;)</div><div class="line"></div><div class="line">class HostUser(Base):</div><div class="line">    __tablename__ = &apos;host_user&apos;</div><div class="line">    nid = Column(Integer, primary_key=True,autoincrement=True)</div><div class="line">    username = Column(String(32))</div><div class="line"></div><div class="line"># 查询</div><div class="line">host_obj = session.query(Host).filter(Host.hostname==&apos;c1&apos;).first()</div><div class="line">for item in host_obj.host_user:</div><div class="line">    print(item.username)</div></pre></td></tr></table></figure></the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[paramiko 模块]]></title>
      <url>http://dxtywt.github.io/2016/07/31/2016-07-31-paramiko/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>paramiko模块，基于SSH用于连接远程服务器并执行相关操作。</excerpt></p>
<p><strong>安装：</strong></p>
<pre><code>pip3 install paramiko
</code></pre><a id="more"></a>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="基于文件名密码连接："><a href="#基于文件名密码连接：" class="headerlink" title="基于文件名密码连接："></a>基于文件名密码连接：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> paramiko</div><div class="line"></div><div class="line">ssh = paramiko.SSHClient()                                   <span class="comment"># 创建SSH对象</span></div><div class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())    <span class="comment"># 允许连接不在know_hosts文件中的主机</span></div><div class="line">ssh.connect(hostname=<span class="string">'c1.salt.com'</span>, port=<span class="number">22</span>, username=<span class="string">'wupeiqi'</span>, password=<span class="string">'123'</span>)    <span class="comment"># 连接服务器</span></div><div class="line"></div><div class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">'ls'</span>)               <span class="comment"># 执行命令</span></div><div class="line">result = stdout.read()                                       <span class="comment"># 获取命令结果</span></div><div class="line">   </div><div class="line">ssh.close()                                                  <span class="comment"># 关闭连接</span></div></pre></td></tr></table></figure>
<p>SSHClient 封装 Transport</p>
<p>便于连接的复用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> paramiko</div><div class="line"></div><div class="line">transport = paramiko.Transport((<span class="string">'hostname'</span>, <span class="number">22</span>))</div><div class="line">transport.connect(username=<span class="string">'wupeiqi'</span>, password=<span class="string">'123'</span>)</div><div class="line"></div><div class="line">ssh = paramiko.SSHClient()</div><div class="line">ssh._transport = transport</div><div class="line"></div><div class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">'df'</span>)</div><div class="line"><span class="keyword">print</span> stdout.read()</div><div class="line"></div><div class="line">transport.close()</div></pre></td></tr></table></figure>
<h4 id="基于秘钥连接："><a href="#基于秘钥连接：" class="headerlink" title="基于秘钥连接："></a>基于秘钥连接：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> paramiko</div><div class="line">  </div><div class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">'/home/auto/.ssh/id_rsa'</span>)   <span class="comment"># 指定秘钥文件</span></div><div class="line">  </div><div class="line">ssh = paramiko.SSHClient()                                  <span class="comment"># 创建SSH对象</span></div><div class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())   <span class="comment"># 允许连接不在know_hosts文件中的主机</span></div><div class="line">ssh.connect(hostname=<span class="string">'c1.salt.com'</span>, port=<span class="number">22</span>, username=<span class="string">'wupeiqi'</span>, key=private_key)   <span class="comment"># 连接服务器</span></div><div class="line">  </div><div class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">'df'</span>)              <span class="comment"># 执行命令</span></div><div class="line">result = stdout.read()                                      <span class="comment"># 获取命令结果</span></div><div class="line"> </div><div class="line">ssh.close()                                                 <span class="comment"># 关闭连接</span></div></pre></td></tr></table></figure>
<p>SSHClient 封装 Transport</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> paramiko</div><div class="line"></div><div class="line">private_key = paramiko.RSAKey.from_private_key_file(<span class="string">'/home/auto/.ssh/id_rsa'</span>)</div><div class="line"></div><div class="line">transport = paramiko.Transport((<span class="string">'hostname'</span>, <span class="number">22</span>))</div><div class="line">transport.connect(username=<span class="string">'wupeiqi'</span>, pkey=private_key)</div><div class="line"></div><div class="line">ssh = paramiko.SSHClient()</div><div class="line">ssh._transport = transport</div><div class="line"></div><div class="line">stdin, stdout, stderr = ssh.exec_command(<span class="string">'df'</span>)</div><div class="line"></div><div class="line">transport.close()</div></pre></td></tr></table></figure>
<h4 id="文件上传下载："><a href="#文件上传下载：" class="headerlink" title="文件上传下载："></a>文件上传下载：</h4><p>调用 transport，transport的获取如上：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sftp = paramiko.SFTPClient.from_transport(transport)</div><div class="line"><span class="comment"># 将location.py 上传至服务器 /tmp/test.py</span></div><div class="line">sftp.put(<span class="string">'/tmp/location.py'</span>, <span class="string">'/tmp/test.py'</span>)</div><div class="line"><span class="comment"># 将remove_path 下载到本地 local_path</span></div><div class="line">sftp.get(<span class="string">'remove_path'</span>, <span class="string">'local_path'</span>)</div><div class="line">  </div><div class="line">transport.close()</div></pre></td></tr></table></figure>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> paramiko</div><div class="line"><span class="keyword">import</span> uuid</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSHConnection</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host=<span class="string">'192.168.11.61'</span>, port=<span class="number">22</span>, username=<span class="string">'alex'</span>,pwd=<span class="string">'alex3714'</span>)</span>:</span></div><div class="line">        self.host = host</div><div class="line">        self.port = port</div><div class="line">        self.username = username</div><div class="line">        self.pwd = pwd</div><div class="line">        self.__k = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.connect()</div><div class="line">        <span class="keyword">pass</span></div><div class="line">        self.close()</div><div class="line">    </div><div class="line">    <span class="comment"># 建立连接，返回封装好的transport</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self)</span>:</span></div><div class="line">        transport = paramiko.Transport((self.host,self.port))</div><div class="line">        transport.connect(username=self.username,password=self.pwd)</div><div class="line">        self.__transport = transport</div><div class="line">    </div><div class="line">    <span class="comment"># 断开连接</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        self.__transport.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(self, command)</span>:</span></div><div class="line">        ssh = paramiko.SSHClient()</div><div class="line">        ssh._transport = self.__transport</div><div class="line">        <span class="comment"># 执行命令</span></div><div class="line">        stdin, stdout, stderr = ssh.exec_command(command)</div><div class="line">        <span class="comment"># 获取命令结果</span></div><div class="line">        result = stdout.read()</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(self,local_path, target_path)</span>:</span></div><div class="line">        <span class="comment"># 连接，上传</span></div><div class="line">        sftp = paramiko.SFTPClient.from_transport(self.__transport)</div><div class="line">        <span class="comment"># 将location.py 上传至服务器 /tmp/test.py</span></div><div class="line">        sftp.put(local_path, target_path)</div><div class="line"></div><div class="line">ssh = SSHConnection()</div><div class="line">ssh.connect()</div><div class="line">r1 = ssh.cmd(<span class="string">'df'</span>)</div><div class="line">ssh.upload(<span class="string">'s2.py'</span>, <span class="string">"/home/alex/s7.py"</span>)</div><div class="line">ssh.close()</div></pre></td></tr></table></figure>
<h2 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h2><p>教学视频：<a href="http://edu.51cto.com/course/course_id-5686.html" target="_blank" rel="external">http://edu.51cto.com/course/course_id-5686.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql基本操作及python操作mysql]]></title>
      <url>http://dxtywt.github.io/2016/07/24/2016-07-24-python-mysql/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> 

<p>参考：<a href="http://www.cnblogs.com/wupeiqi/articles/5699254.html" target="_blank" rel="external">http://www.cnblogs.com/wupeiqi/articles/5699254.html</a></p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="一、显示数据"><a href="#一、显示数据" class="headerlink" title="一、显示数据"></a>一、显示数据</h4><pre><code>SHOW DATABASES;

# 默认数据库：
mysql - 用户权限相关数据
test - 用于用户测试数据
information_schema - MySQL本身架构相关数据
</code></pre><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h4 id="二、使用数据库"><a href="#二、使用数据库" class="headerlink" title="二、使用数据库"></a>二、使用数据库</h4><pre><code>USE db_name;
</code></pre><h4 id="三、显示所有表"><a href="#三、显示所有表" class="headerlink" title="三、显示所有表"></a>三、显示所有表</h4><pre><code>SHOW TABLES;
</code></pre><h4 id="四、用户授权"><a href="#四、用户授权" class="headerlink" title="四、用户授权"></a>四、用户授权</h4><p>用户管理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">创建用户</div><div class="line">    create user &apos;用户名&apos;@&apos;IP地址&apos; identified by &apos;密码&apos;;</div><div class="line">删除用户</div><div class="line">    drop user &apos;用户名&apos;@&apos;IP地址&apos;;</div><div class="line">修改用户</div><div class="line">    rename user &apos;用户名&apos;@&apos;IP地址&apos;; to &apos;新用户名&apos;@&apos;IP地址&apos;;;</div><div class="line">修改密码</div><div class="line">    set password for &apos;用户名&apos;@&apos;IP地址&apos; = Password(&apos;新密码&apos;)</div></pre></td></tr></table></figure>
<p>PS：用户权限相关数据保存在mysql数据库的user表中，所以也可以直接对其进行操作（不建议）</p>
<p>授权管理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show grants for &apos;用户&apos;@&apos;IP地址&apos;                  -- 查看权限</div><div class="line">grant  权限 on 数据库.表 to   &apos;用户&apos;@&apos;IP地址&apos;      -- 授权</div><div class="line">revoke 权限 on 数据库.表 from &apos;用户&apos;@&apos;IP地址&apos;      -- 取消权限</div></pre></td></tr></table></figure>
<p>权限详细：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">all privileges          除grant外的所有权限</div><div class="line">select                  仅查权限</div><div class="line">select,insert           查和插入权限</div><div class="line">usage                   无访问权限</div><div class="line">alter                   使用alter table</div><div class="line">alter routine           使用alter procedure和drop procedure</div><div class="line">create                  使用create table</div><div class="line">create routine          使用create procedure</div><div class="line">create temporary tables 使用create temporary tables</div><div class="line">create user             使用create user、drop user、rename user和revoke  all privileges</div><div class="line">create view             使用create view</div><div class="line">delete                  使用delete</div><div class="line">drop                    使用drop table</div><div class="line">execute                 使用call和存储过程</div><div class="line">file                    使用select into outfile 和 load data infile</div><div class="line">grant option            使用grant 和 revoke</div><div class="line">index                   使用index</div><div class="line">insert                  使用insert</div><div class="line">lock tables             使用lock table</div><div class="line">process                 使用show full processlist</div><div class="line">select                  使用select</div><div class="line">show databases          使用show databases</div><div class="line">show view               使用show view</div><div class="line">update                  使用update</div><div class="line">reload                  使用flush</div><div class="line">shutdown                使用mysqladmin shutdown(关闭MySQL)</div><div class="line">super                   使用change master、kill、logs、purge、master和set global。还允许mysqladmin调试登陆</div><div class="line">replication client      服务器位置的访问</div><div class="line">replication slave       由复制从属使用</div></pre></td></tr></table></figure>
<p>对于目标数据库以及内部其他：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">数据库名.*           数据库中的所有</div><div class="line">数据库名.表          指定数据库中的某张表</div><div class="line">数据库名.存储过程    指定数据库中的存储过程</div><div class="line">*.*                  所有数据库</div></pre></td></tr></table></figure>
<p>对于用户和IP：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用户名@IP地址         用户只能在改IP下才能访问</div><div class="line">用户名@192.168.1.%        用户只能在改IP段下才能访问(通配符%表示任意)</div><div class="line">用户名@%     用户可以再任意IP下访问(默认IP地址为%)</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grant all privileges on db1.tb1 TO &apos;用户名&apos;@&apos;IP&apos;</div><div class="line">grant select on db1.* TO &apos;用户名&apos;@&apos;IP&apos;</div><div class="line">grant select,insert on *.* TO &apos;用户名&apos;@&apos;IP&apos;</div><div class="line">revoke select on db1.tb1 from &apos;用户名&apos;@&apos;IP&apos;</div></pre></td></tr></table></figure>
<h4 id="五、表操作"><a href="#五、表操作" class="headerlink" title="五、表操作"></a>五、表操作</h4><p>1、创建表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">create table 表名(</div><div class="line">    列名  类型  是否可以为空，</div><div class="line">    列名  类型  是否可以为空</div><div class="line">)</div></pre></td></tr></table></figure>
<p>是否可空</p>
<pre><code>是否可空，null表示空，非字符串
not null    - 不可空
null        - 可空
</code></pre><p>默认值，创建列时可以指定默认值，当插入数据时如果未主动设置，则自动添加默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">create table tb1(</div><div class="line">    nid int not null defalut 2,</div><div class="line">    num int not null</div><div class="line">)</div></pre></td></tr></table></figure>
<p>自增，如果为某列设置自增列，插入数据时无需设置此列，默认将自增（表中只能有一个自增列）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">create table tb1(</div><div class="line">    nid int not null auto_increment primary key,</div><div class="line">    num int null</div><div class="line">)</div><div class="line"></div><div class="line">或</div><div class="line">create table tb1(</div><div class="line">    nid int not null auto_increment,</div><div class="line">    num int null,</div><div class="line">    index(nid)</div><div class="line">)</div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li>对于自增列，必须是索引（含主键）。</li>
<li>对于自增可以设置步长和起始值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">show session variables like &apos;auto_inc%&apos;;</div><div class="line">set session auto_increment_increment=2;</div><div class="line">set session auto_increment_offset=10;</div><div class="line"></div><div class="line">shwo global  variables like &apos;auto_inc%&apos;;</div><div class="line">set global auto_increment_increment=2;</div><div class="line">set global auto_increment_offset=10;</div></pre></td></tr></table></figure>
<p>主键，一种特殊的唯一索引，不允许有空值，如果主键使用单个列，则它的值必须唯一，如果是多列，则其组合必须唯一。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">create table tb1(</div><div class="line">    nid int not null auto_increment primary key,</div><div class="line">    num int null</div><div class="line">)</div><div class="line">或</div><div class="line">create table tb1(</div><div class="line">    nid int not null,</div><div class="line">    num int not null,</div><div class="line">    primary key(nid,num)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>外键，一个特殊的索引，只能是指定内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">creat table color(</div><div class="line">    nid int not null primary key,</div><div class="line">    name char(16) not null</div><div class="line">)</div><div class="line"></div><div class="line">create table fruit(</div><div class="line">    nid int not null primary key,</div><div class="line">    smt char(32) null ,</div><div class="line">    color_id int not null,</div><div class="line">    constraint fk_cc foreign key (color_id) references color(nid)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>2、删除表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drop table 表名</div></pre></td></tr></table></figure>
<p>3、清空表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">delete from 表名</div><div class="line">truncate table 表名</div></pre></td></tr></table></figure>
<p>4、修改表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">添加列：alter table 表名 add 列名 类型</div><div class="line">删除列：alter table 表名 drop column 列名</div><div class="line">修改列：</div><div class="line">        alter table 表名 modify column 列名 类型;  -- 类型</div><div class="line">        alter table 表名 change 原列名 新列名 类型; -- 列名，类型</div><div class="line"> </div><div class="line">添加主键：</div><div class="line">        alter table 表名 add primary key(列名);</div><div class="line">删除主键：</div><div class="line">        alter table 表名 drop primary key;</div><div class="line">        alter table 表名  modify  列名 int, drop primary key;</div><div class="line"> </div><div class="line">添加外键：alter table 从表 add constraint 外键名称（形如：FK_从表_主表） foreign key 从表(外键字段) references 主表(主键字段);</div><div class="line">删除外键：alter table 表名 drop foreign key 外键名称</div><div class="line"> </div><div class="line">修改默认值：ALTER TABLE testalter_tbl ALTER i SET DEFAULT 1000;</div><div class="line">删除默认值：ALTER TABLE testalter_tbl ALTER i DROP DEFAULT;</div></pre></td></tr></table></figure>
<p>5、基本数据类型</p>
<p>MySQL的数据类型大致分为：数值、时间和字符串</p>
<p>详见 <a href="http://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="external">http://www.runoob.com/mysql/mysql-data-types.html</a></p>
<h4 id="六、基本操作"><a href="#六、基本操作" class="headerlink" title="六、基本操作"></a>六、基本操作</h4><p>1、增</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">insert into 表 (列名,列名...) values (值,值,值...)</div><div class="line">insert into 表 (列名,列名...) values (值,值,值...),(值,值,值...)</div><div class="line">insert into 表 (列名,列名...) select (列名,列名...) from 表</div></pre></td></tr></table></figure>
<p>2、删</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">delete from 表</div><div class="line">delete from 表 where id＝1 and name＝&apos;alex&apos;</div></pre></td></tr></table></figure>
<p>3、改</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update 表 set name ＝ &apos;alex&apos; where id&gt;1</div></pre></td></tr></table></figure>
<p>4、查</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select * from 表</div><div class="line">select * from 表 where id &gt; 1</div><div class="line">select nid,name,gender as gg from 表 where id &gt; 1</div></pre></td></tr></table></figure>
<p>5、其他</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">1、条件</div><div class="line">    select * from 表 where id &gt; 1 and name != &apos;alex&apos; and num = 12;</div><div class="line">    select * from 表 where id between 5 and 16;</div><div class="line"></div><div class="line">    select * from 表 where id in (11,22,33)</div><div class="line">    select * from 表 where id not in (11,22,33)</div><div class="line">    select * from 表 where id in (select nid from 表)</div><div class="line"></div><div class="line">2、通配符</div><div class="line">    select * from 表 where name like &apos;ale%&apos;  - ale开头的所有（多个字符串）</div><div class="line">    select * from 表 where name like &apos;ale_&apos;  - ale开头的所有（一个字符）</div><div class="line"></div><div class="line">3、限制</div><div class="line">    select * from 表 limit 5;            - 前5行</div><div class="line">    select * from 表 limit 4,5;          - 从第4行开始的5行</div><div class="line">    select * from 表 limit 5 offset 4    - 从第4行开始的5行</div><div class="line"></div><div class="line">4、排序</div><div class="line">    select * from 表 order by 列 asc              - 根据 “列” 从小到大排列</div><div class="line">    select * from 表 order by 列 desc             - 根据 “列” 从大到小排列</div><div class="line">    select * from 表 order by 列1 desc,列2 asc    - 根据 “列1” 从大到小排列，如果相同则按列2从小到大排序</div><div class="line"></div><div class="line">5、分组</div><div class="line">    select num from 表 group by num</div><div class="line">    select num,nid from 表 group by num,nid</div><div class="line">    select num,nid from 表  where nid &gt; 10 group by num,nid order nid desc</div><div class="line">    select num,nid,count(*),sum(score),max(score),min(score) from 表 group by num,nid</div><div class="line"></div><div class="line">    select num from 表 group by num having max(id) &gt; 10</div><div class="line"></div><div class="line">    特别的：group by 必须在where之后，order by之前</div><div class="line"></div><div class="line">6、连表</div><div class="line">    无对应关系则不显示</div><div class="line">    select A.num, A.name, B.name</div><div class="line">    from A,B</div><div class="line">    Where A.nid = B.nid</div><div class="line"></div><div class="line">    无对应关系则不显示</div><div class="line">    select A.num, A.name, B.name</div><div class="line">    from A inner join B</div><div class="line">    on A.nid = B.nid</div><div class="line"></div><div class="line">    A表所有显示，如果B中无对应关系，则值为null</div><div class="line">    select A.num, A.name, B.name</div><div class="line">    from A left join B</div><div class="line">    on A.nid = B.nid</div><div class="line"></div><div class="line">    B表所有显示，如果B中无对应关系，则值为null</div><div class="line">    select A.num, A.name, B.name</div><div class="line">    from A right join B</div><div class="line">    on A.nid = B.nid</div><div class="line"></div><div class="line">7、组合</div><div class="line">    组合，自动处理重合</div><div class="line">    select nickname</div><div class="line">    from A</div><div class="line">    union</div><div class="line">    select name</div><div class="line">    from B</div><div class="line"></div><div class="line">    组合，不处理重合</div><div class="line">    select nickname</div><div class="line">    from A</div><div class="line">    union all</div><div class="line">    select name</div><div class="line">    from B</div></pre></td></tr></table></figure>
<h2 id="python-pymysql"><a href="#python-pymysql" class="headerlink" title="python pymysql"></a>python pymysql</h2><p>pymsql是Python中操作MySQL的模块，其使用方法和MySQLdb几乎相同。</p>
<h3 id="一、下载安装："><a href="#一、下载安装：" class="headerlink" title="一、下载安装："></a>一、下载安装：</h3><pre><code>pip3 install pymysql
</code></pre><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="1、执行SQL"><a href="#1、执行SQL" class="headerlink" title="1、执行SQL"></a>1、执行SQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import pymysql</div><div class="line"> </div><div class="line"># 创建连接</div><div class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)</div><div class="line"># 创建游标</div><div class="line">cursor = conn.cursor()</div><div class="line"> </div><div class="line"># 执行SQL，并返回收影响行数</div><div class="line">effect_row = cursor.execute(&quot;update hosts set host = &apos;1.1.1.2&apos;&quot;)</div><div class="line"> </div><div class="line"># 执行SQL，并返回受影响行数</div><div class="line">#effect_row = cursor.execute(&quot;update hosts set host = &apos;1.1.1.2&apos; where nid &gt; %s&quot;, (1,))</div><div class="line"> </div><div class="line"># 执行SQL，并返回受影响行数</div><div class="line">#effect_row = cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;1.1.1.11&quot;,1),(&quot;1.1.1.11&quot;,2)])</div><div class="line"> </div><div class="line"> </div><div class="line"># 提交，不然无法保存新建或者修改的数据</div><div class="line">conn.commit()</div><div class="line"> </div><div class="line"># 关闭游标</div><div class="line">cursor.close()</div><div class="line"># 关闭连接</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
<h4 id="2、获取新创建数据自增ID"><a href="#2、获取新创建数据自增ID" class="headerlink" title="2、获取新创建数据自增ID"></a>2、获取新创建数据自增ID</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import pymysql</div><div class="line"> </div><div class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)</div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.executemany(&quot;insert into hosts(host,color_id)values(%s,%s)&quot;, [(&quot;1.1.1.11&quot;,1),(&quot;1.1.1.11&quot;,2)])</div><div class="line">conn.commit()</div><div class="line">cursor.close()</div><div class="line">conn.close()</div><div class="line"> </div><div class="line"># 获取最新自增ID</div><div class="line">new_id = cursor.lastrowid</div></pre></td></tr></table></figure>
<h4 id="3、获取查询数据"><a href="#3、获取查询数据" class="headerlink" title="3、获取查询数据"></a>3、获取查询数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import pymysql</div><div class="line"> </div><div class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)</div><div class="line">cursor = conn.cursor()</div><div class="line">cursor.execute(&quot;select * from hosts&quot;)</div><div class="line"> </div><div class="line"># 获取第一行数据</div><div class="line">row_1 = cursor.fetchone()</div><div class="line"> </div><div class="line"># 获取前n行数据</div><div class="line"># row_2 = cursor.fetchmany(3)</div><div class="line"># 获取所有数据</div><div class="line"># row_3 = cursor.fetchall()</div><div class="line"> </div><div class="line">conn.commit()</div><div class="line">cursor.close()</div><div class="line">conn.close()</div><div class="line">注：在fetch数据时按照顺序进行，可以使用cursor.scroll(num,mode)来移动游标位置，如：</div><div class="line"></div><div class="line">cursor.scroll(1,mode=&apos;relative&apos;)  # 相对当前位置移动</div><div class="line">cursor.scroll(2,mode=&apos;absolute&apos;) # 相对绝对位置移动</div></pre></td></tr></table></figure>
<h4 id="4、fetch数据类型"><a href="#4、fetch数据类型" class="headerlink" title="4、fetch数据类型"></a>4、fetch数据类型</h4><p>关于默认获取的数据是元祖类型，如果想要或者字典类型的数据，即：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding:utf-8 -*-</div><div class="line">import pymysql</div><div class="line"> </div><div class="line">conn = pymysql.connect(host=&apos;127.0.0.1&apos;, port=3306, user=&apos;root&apos;, passwd=&apos;123&apos;, db=&apos;t1&apos;)</div><div class="line"> </div><div class="line"># 游标设置为字典类型</div><div class="line">cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)</div><div class="line">r = cursor.execute(&quot;call p1()&quot;)</div><div class="line"> </div><div class="line">result = cursor.fetchone()</div><div class="line"> </div><div class="line">conn.commit()</div><div class="line">cursor.close()</div><div class="line">conn.close()</div></pre></td></tr></table></figure>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[redis发布与订阅、rabbitmq、paramiko]]></title>
      <url>http://dxtywt.github.io/2016/07/24/2016-07-24-rabbitmq-paramiko/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<h2 id="一、线程池"><a href="#一、线程池" class="headerlink" title="一、线程池"></a>一、线程池</h2><pre><code>上下文管理
终止线程池操作
</code></pre><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h2 id="二、redis-发布与订阅"><a href="#二、redis-发布与订阅" class="headerlink" title="二、redis 发布与订阅"></a>二、redis 发布与订阅</h2><p>连接池<br>自定义列表操作</p>
<p>Demo</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> redis</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisHelper</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.__conn = redis.Redis(host=<span class="string">'10.0.0.7'</span>)</div><div class="line">        self.chan_sub = <span class="string">'fm104.5'</span></div><div class="line">        self.chan_pub = <span class="string">'fm104.5'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public</span><span class="params">(self, msg)</span>:</span></div><div class="line">        self.__conn.publish(self.chan_pub, msg)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subscribe</span><span class="params">(self)</span>:</span></div><div class="line">        pub = self.__conn.pubsub()</div><div class="line">        pub.subscribe(self.chan_sub)</div><div class="line">        pub.parse_response()</div><div class="line">        <span class="keyword">return</span> pub</div></pre></td></tr></table></figure>
<p>发布</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> redis_helper</div><div class="line"></div><div class="line">obj = redis_helper.RedisHelper()</div><div class="line">obj.public(<span class="string">'hello'</span>)</div></pre></td></tr></table></figure>
<p>订阅</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> redis_helper</div><div class="line"></div><div class="line">obj = redis_helper.RedisHelper()</div><div class="line">redis_sub = obj.subscribe()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    msg= redis_sub.parse_response()</div><div class="line">    print(msg)</div></pre></td></tr></table></figure>
<h2 id="三、rabbitMQ"><a href="#三、rabbitMQ" class="headerlink" title="三、rabbitMQ"></a>三、rabbitMQ</h2><p>参考 : <a href="http://www.cnblogs.com/qiyebao/p/4205626.html" target="_blank" rel="external">http://www.cnblogs.com/qiyebao/p/4205626.html</a></p>
<p>RabbitMQ是一个在AMQP基础上完整的，可复用的企业消息系统。他遵循Mozilla Public License开源协议。</p>
<p>MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消 息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过 队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">安装配置epel源</div><div class="line">rpm -ivh http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</div><div class="line"> </div><div class="line">安装erlang</div><div class="line">yum -y install erlang</div><div class="line"> </div><div class="line">安装RabbitMQ</div><div class="line">yum -y install rabbitmq-server</div><div class="line"></div><div class="line">安装API</div><div class="line">pip install pika</div></pre></td></tr></table></figure>
<p>对于RabbitMQ来说，生产和消费不再针对内存里的一个Queue对象，而是某台服务器上的RabbitMQ Server实现的消息队列。</p>
<p>生产者</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pika</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=<span class="string">'10.0.0.7'</span>))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.queue_declare(queue=<span class="string">'hello'</span>)</div><div class="line"></div><div class="line">channel.basic_publish(exchange=<span class="string">''</span>,</div><div class="line">                      routing_key=<span class="string">'hello'</span>,</div><div class="line">                      body=<span class="string">'Hello World!'</span>)</div><div class="line">print(<span class="string">" [x] Sent 'Hello World!'"</span>)</div><div class="line">connection.close()</div></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pika</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=<span class="string">'10.0.0.7'</span>))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.queue_declare(queue=<span class="string">'hello'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">" [x] Received %r"</span> % body)</div><div class="line"></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">'hello'</span>,</div><div class="line">                      no_ack=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">print(<span class="string">' [*] Waiting for messages. To exit press CTRL+C'</span>)</div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure>
<h3 id="1-Message-acknowledgment-消息确认"><a href="#1-Message-acknowledgment-消息确认" class="headerlink" title="1. Message acknowledgment 消息确认"></a>1. Message acknowledgment 消息确认</h3><blockquote>
<p>no-ack ＝ False，如果消费者遇到情况挂掉了，那么，RabbitMQ会重新将该任务添加到队列中。</p>
</blockquote>
<p>每个Consumer可能需要一段时间才能处理完收到的数据。如果在这个过程中，Consumer出错了，异常退出了，而数据还没有处理完成，那么 非常不幸，这段数据就丢失了。因为我们采用no-ack的方式进行确认，也就是说，每次Consumer接到数据后，而不管是否处理完 成，RabbitMQ Server会立即把这个Message标记为完成，然后从queue中删除了。</p>
<p>如果一个Consumer异常退出了，它处理的数据能够被另外的Consumer处理，这样数据在这种情况下就不会丢失了（注意是这种情况下）。</p>
<p>为了保证数据不被丢失，RabbitMQ支持消息确认机制，即acknowledgments。为了保证数据能被正确处理而不仅仅是被Consumer收到，那么我们不能采用no-ack。而应该是在处理完数据后发送ack。在处理数据后发送的ack，就是告诉RabbitMQ数据已经被接收，处理完成，RabbitMQ可以去安全的删除它了。如果Consumer退出了但是没有发送ack，那么RabbitMQ就会把这个Message发送到下一个Consumer。这样就保证了在Consumer异常退出的情况下数据也不会丢失。</p>
<p>这里并没有用到超时机制。RabbitMQ仅仅通过Consumer的连接中断来确认该Message并没有被正确处理。也就是说，RabbitMQ给了Consumer足够长的时间来做数据处理。这样即使你通过Ctr-C中断了Recieve.cs，那么Message也不会丢失了，它会被分发到下一个Consumer。</p>
<p><strong>如果忘记了ack，那么后果很严重</strong>。当Consumer退出时，Message会重新分发。然后RabbitMQ会占用越来越多的内存，由于 RabbitMQ会长时间运行，因此这个<strong>“内存泄漏”</strong>是致命的。去调试这种错误，可以通过一下命令打印un-acked Messages.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=<span class="string">'hello'</span>,</div><div class="line">                      no_ack=<span class="keyword">False</span>)</div></pre></td></tr></table></figure>
<h3 id="2-Message-durability-消息持久化"><a href="#2-Message-durability-消息持久化" class="headerlink" title="2 Message durability 消息持久化"></a>2 Message durability 消息持久化</h3><p>采用ack，可以保证即使Consumer异常退出，Message也不会丢失，是如果RabbitMQ Server退出，Message一样会丢失。</p>
<p>为了保证在RabbitMQ退出或者crash了数据仍没有丢失，需要将queue和Message都要持久化。queue的持久化需要在声明时指定durable=True，修改Producer和Consumer的channel.QueueDeclare代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">channel.queue_declare(queue=<span class="string">'hello'</span>, durable=<span class="keyword">True</span>)</div></pre></td></tr></table></figure>
<h3 id="3、消息获取顺序"><a href="#3、消息获取顺序" class="headerlink" title="3、消息获取顺序"></a>3、消息获取顺序</h3><p>默认消息队列里的数据是按照顺序被消费者拿走，如果有个Consumer工作比较重，那么就会导致有的Consumer基本没事可做，有的Consumer却是毫无休息的机会。</p>
<p>通过 basic_qos 方法设置 <code>prefetch_count = 1</code>。这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理一个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。<strong>注意</strong>，这种方法可能会<strong>导致queue满</strong>。</p>
<p>谁来谁取，不再按照奇偶数排列</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">channel.basic_qos(prefetch_count=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h3 id="4、发布与订阅-exchange-type-fanout"><a href="#4、发布与订阅-exchange-type-fanout" class="headerlink" title="4、发布与订阅   exchange type = fanout"></a>4、发布与订阅   <code>exchange type = fanout</code></h3><p>发布订阅和简单的消息队列区别在于，发布订阅会将消息发送给所有的订阅者，而消息队列中的数据被消费一次便消失。所以，RabbitMQ实现发布和订阅时，会为每一个订阅者创建一个队列，而发布者发布消息时，会将消息放置在所有相关队列中。</p>
<p>发布</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=<span class="string">'10.0.0.7'</span>))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.exchange_declare(exchange=<span class="string">'logs'</span>,</div><div class="line">                         type=<span class="string">'fanout'</span>)</div><div class="line"></div><div class="line">message = <span class="string">"hello world"</span>  <span class="comment"># ' '.join(sys.argv[1:]) or "info: Hello World!"</span></div><div class="line">channel.basic_publish(exchange=<span class="string">'logs'</span>,</div><div class="line">                      routing_key=<span class="string">''</span>,</div><div class="line">                      body=message)</div><div class="line">print(<span class="string">" [x] Sent %r"</span> % message)</div><div class="line">connection.close()</div></pre></td></tr></table></figure>
<p>订阅</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pika</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=<span class="string">'10.0.0.7'</span>))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.exchange_declare(exchange=<span class="string">'logs'</span>,</div><div class="line">                         type=<span class="string">'fanout'</span>)</div><div class="line"></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line">print(queue_name)</div><div class="line"></div><div class="line">channel.queue_bind(exchange=<span class="string">'logs'</span>,</div><div class="line">                   queue=queue_name)</div><div class="line"></div><div class="line">print(<span class="string">' [*] Waiting for logs. To exit press CTRL+C'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">" [x] %r"</span> % body)</div><div class="line"></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure>
<h3 id="5、关键字发送-exchange-type-direct"><a href="#5、关键字发送-exchange-type-direct" class="headerlink" title="5、关键字发送  exchange type = direct"></a>5、关键字发送  <code>exchange type = direct</code></h3><p>之前事例，发送消息时明确指定某个队列并向其中发送消息，RabbitMQ还支持根据关键字发送，即：队列绑定关键字，发送者将数据根据关键字发送到消息exchange，exchange根据 关键字 判定应该将数据发送至指定队列。</p>
<p>消费者</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=<span class="string">'10.0.0.7'</span>))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.exchange_declare(exchange=<span class="string">'direct_logs'</span>,</div><div class="line">                         type=<span class="string">'direct'</span>)</div><div class="line"></div><div class="line">result = channel.queue_declare(exclusive=<span class="keyword">True</span>)</div><div class="line">queue_name = result.method.queue</div><div class="line"></div><div class="line">severities = [<span class="string">'info'</span>,<span class="string">'wanning'</span>,<span class="string">'error'</span>,]</div><div class="line"></div><div class="line"><span class="keyword">for</span> severity <span class="keyword">in</span> severities:</div><div class="line">    channel.queue_bind(exchange=<span class="string">'direct_logs'</span>,</div><div class="line">                       queue=queue_name,</div><div class="line">                       routing_key=severity)</div><div class="line"></div><div class="line">print(<span class="string">' [*] Waiting for logs. To exit press CTRL+C'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(ch, method, properties, body)</span>:</span></div><div class="line">    print(<span class="string">" [x] %r:%r"</span> % (method.routing_key, body))</div><div class="line"></div><div class="line">channel.basic_consume(callback,</div><div class="line">                      queue=queue_name,</div><div class="line">                      no_ack=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">channel.start_consuming()</div></pre></td></tr></table></figure>
<p>生产者</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pika</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line">connection = pika.BlockingConnection(pika.ConnectionParameters(</div><div class="line">        host=<span class="string">'10.0.0.7'</span>))</div><div class="line">channel = connection.channel()</div><div class="line"></div><div class="line">channel.exchange_declare(exchange=<span class="string">'direct_logs'</span>,</div><div class="line">                         type=<span class="string">'direct'</span>)</div><div class="line"></div><div class="line">severity = <span class="string">'error'</span></div><div class="line">message = <span class="string">'Hello World!'</span></div><div class="line">channel.basic_publish(exchange=<span class="string">'direct_logs'</span>,</div><div class="line">                      routing_key=severity,</div><div class="line">                      body=message)</div><div class="line">print(<span class="string">" [x] Sent %r:%r"</span> % (severity, message))</div><div class="line">connection.close()</div></pre></td></tr></table></figure>
<h3 id="6、模糊匹配-exchange-type-topic"><a href="#6、模糊匹配-exchange-type-topic" class="headerlink" title="6、模糊匹配 exchange type = topic"></a>6、模糊匹配 <code>exchange type = topic</code></h3><p>在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入”路由值“和 ”关键字“进行匹配，匹配成功，则将数据发送到指定队列。</p>
<ul>
<li># 表示可以匹配 0 个 或 多个 单词</li>
<li>*  表示只能匹配 一个 单词</li>
</ul>
<h3 id="7、RPC"><a href="#7、RPC" class="headerlink" title="7、RPC"></a>7、RPC</h3><h2 id="四、paramiko"><a href="#四、paramiko" class="headerlink" title="四、paramiko"></a>四、paramiko</h2><p>paramiko模块，基于SSH用于连接远程服务器并执行相关操作。</p>
<p>待续。。。</p>
<h2 id="五、堡垒机"><a href="#五、堡垒机" class="headerlink" title="五、堡垒机"></a>五、堡垒机</h2><p><a href="http://edu.51cto.com/course/course_id-5686.html" target="_blank" rel="external">http://edu.51cto.com/course/course_id-5686.html</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[线程、进程、协程]]></title>
      <url>http://dxtywt.github.io/2016/07/17/2016-07-17-python-threading-processing-greenlet/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> 

<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>Threading用于提供线程相关的操作，线程是应用程序中工作的最小单元。</p>
<h3 id="两种定义线程的方法："><a href="#两种定义线程的方法：" class="headerlink" title="两种定义线程的方法："></a>两种定义线程的方法：</h3><p>第一种（推荐）：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(arg)</span>:</span></div><div class="line">    print(arg)</div><div class="line"></div><div class="line">t = threading.Thread(target=f1,args=(<span class="number">123</span>,))</div><div class="line">t.start()</div></pre></td></tr></table></figure>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<p>第二种：继承<code>threading.Thread</code>,需自定义<code>run</code>方法，执行<code>start</code>，会默认调用<code>run</code>方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(arg)</span>:</span></div><div class="line">    print(arg+<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,func,args)</span>:</span></div><div class="line">        self.func = func</div><div class="line">        self.args = args</div><div class="line">        super(MyThread,self).__init__()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        self.func(self.args)</div><div class="line"></div><div class="line">m = MyThread(f2,<span class="number">123</span>)</div><div class="line">m.start()</div></pre></td></tr></table></figure>
<p><strong>更多方法：</strong></p>
<ul>
<li>start  线程准备就绪，等待CPU调度</li>
<li>setName  为线程设置名称</li>
<li>getName  获取线程名称</li>
<li>setDaemon 设置为后台线程或前台线程（默认）<br>如果是后台线程，主线程执行过程中，后台线程也在进行，主线程执行完毕后，后台线程不论成功与否，均停止<br>如果是前台线程，主线程执行过程中，前台线程也在进行，主线程执行完毕后，等待前台线程也执行完成后，程序停止</li>
<li>join 逐个执行每个线程，执行完毕后继续往下执行，该方法使得多线程变得无意义</li>
<li>线程被cpu调度后自动执行线程对象的run方法</li>
</ul>
<h3 id="线程锁（Lock、RLock）"><a href="#线程锁（Lock、RLock）" class="headerlink" title="线程锁（Lock、RLock）"></a>线程锁（Lock、RLock）</h3><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，当多个线程同时修改同一条数据时可能会出现脏数据，所以，出现了线程锁 - 同一时刻允许一个线程执行操作。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">NUM = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(lock)</span>:</span></div><div class="line">    <span class="keyword">global</span> NUM</div><div class="line">    <span class="comment">#上锁</span></div><div class="line">    lock.acquire()</div><div class="line">    NUM -= <span class="number">1</span></div><div class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 如果没有锁，在sleep的1s内，所有10个线程完成了对NUM的操作，此时，NUM=0</span></div><div class="line">    print(NUM)</div><div class="line">    <span class="comment"># 解锁</span></div><div class="line">    lock.release()</div><div class="line"></div><div class="line">lock = threading.RLock() </div><div class="line"><span class="comment">#lock = threading.Lock()  # 不支持多重锁</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    t = threading.Thread(target=func, args=(lock,))</div><div class="line">    t.start()</div></pre></td></tr></table></figure>
<h3 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h3><p>互斥锁 同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 ，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">NUM = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(l,i)</span>:</span></div><div class="line">    <span class="keyword">global</span> NUM</div><div class="line">    <span class="comment">#上锁</span></div><div class="line">    l.acquire()</div><div class="line">    NUM -= <span class="number">1</span></div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    print(NUM,i，time.time())</div><div class="line">    l.release()</div><div class="line"></div><div class="line">lock = threading.BoundedSemaphore(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    t = threading.Thread(target=func, args=(lock, i,))</div><div class="line">    t.start()</div><div class="line"></div><div class="line">输出：</div><div class="line"><span class="number">8</span> <span class="number">1</span> <span class="number">1468915775.9883053</span></div><div class="line"><span class="number">8</span> <span class="number">0</span> <span class="number">1468915775.9883053</span></div><div class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">1468915776.9892442</span></div><div class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">1468915776.9892442</span></div><div class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">1468915777.9903152</span></div><div class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1468915777.9903152</span></div><div class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">1468915778.9907534</span></div><div class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1468915778.9907534</span></div><div class="line"><span class="number">0</span> <span class="number">8</span> <span class="number">1468915779.9916177</span></div><div class="line"><span class="number">0</span> <span class="number">9</span> <span class="number">1468915779.9916177</span></div></pre></td></tr></table></figure>
<p>由输出可以发现，同时有两个线程执行，<code>BoundedSemaphore(2)</code></p>
<h3 id="事件-event-（红绿灯）"><a href="#事件-event-（红绿灯）" class="headerlink" title="事件 event （红绿灯）"></a>事件 event （红绿灯）</h3><p>python线程的事件用于主线程控制其他线程的执行，事件主要提供了三个方法 set、wait、clear。</p>
<p>事件处理的机制：全局定义了一个“Flag”，如果“Flag”值为 False，那么当程序执行 event.wait 方法时就会阻塞，如果“Flag”值为True，那么event.wait 方法时便不再阻塞。</p>
<p>默认clear为红灯，wait检测（红停，绿行） set设置为绿灯</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i,e)</span>:</span></div><div class="line">    print(i)</div><div class="line">    e.wait()</div><div class="line">    print(i+<span class="number">100</span>)</div><div class="line"></div><div class="line">event = threading.Event()</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    t = threading.Thread(target=func, args=(i, event, ))</div><div class="line">    t.start()</div><div class="line"></div><div class="line">event.clear() <span class="comment"># 设置成红灯</span></div><div class="line">inp = input(<span class="string">"&gt;&gt;:"</span>)</div><div class="line"><span class="keyword">if</span> inp == <span class="string">'1'</span>:</div><div class="line">    event.set()   <span class="comment"># 设置成绿灯</span></div></pre></td></tr></table></figure>
<h3 id="条件（Condition）"><a href="#条件（Condition）" class="headerlink" title="条件（Condition）"></a>条件（Condition）</h3><p>使得线程等待，只有满足某条件时，才释放n个线程</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i,con)</span>:</span></div><div class="line">    print(i)</div><div class="line">    con.acquire()</div><div class="line">    con.wait()</div><div class="line">    print(i+<span class="number">100</span>)</div><div class="line">    con.release()</div><div class="line"></div><div class="line">con = threading.Condition()</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    t = threading.Thread(target=func, args=(i, con,))</div><div class="line">    t.start()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    inp = input(<span class="string">'&gt;&gt;:'</span>)</div><div class="line">    <span class="keyword">if</span> inp == <span class="string">'q'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    con.acquire()</div><div class="line">    con.notify(int(inp))</div><div class="line">    con.release()</div></pre></td></tr></table></figure>
<p>wait_for() 接收一个返回bool值的函数，该函数返回True,则释放一个线程，False不操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">condition</span><span class="params">()</span>:</span></div><div class="line">    ret = <span class="keyword">False</span></div><div class="line">    r = input(<span class="string">'&gt;&gt;&gt;'</span>)</div><div class="line">    <span class="keyword">if</span> r == <span class="string">'true'</span>:</div><div class="line">        ret = <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        ret = <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i,con)</span>:</span></div><div class="line">    print(i)</div><div class="line">    con.acquire()</div><div class="line">    con.wait_for(condition)</div><div class="line">    print(i+<span class="number">100</span>)</div><div class="line">    con.release()</div><div class="line"></div><div class="line">c = threading.Condition()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    t = threading.Thread(target=func, args=(i,c,))</div><div class="line">    t.start()</div></pre></td></tr></table></figure>
<h3 id="计时器-Timer"><a href="#计时器-Timer" class="headerlink" title="计时器 Timer"></a>计时器 Timer</h3><p>定时器，指定n秒后执行某操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Timer</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"hello, world"</span>)</div><div class="line"> </div><div class="line">t = Timer(<span class="number">1</span>, hello)</div><div class="line">t.start()  <span class="comment"># after 1 seconds, "hello, world" will be printed</span></div></pre></td></tr></table></figure>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><strong>什么是线程池？</strong></p>
<p>诸如web服务器、数据库服务器、文件服务器和邮件服务器等许多服务器应用都面向处理来自某些远程来源的大量短小的任务。构建服务器应用程序的一个过于简单的模型是：每当一个请求到达就创建一个新的服务对象，然后在新的服务对象中为请求服务。但当有大量请求并发访问时，服务器不断的创建和销毁对象的开销很大。所以提高服务器效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这样就引入了“池”的概念，“池”的概念使得人们可以定制一定量的资源，然后对这些资源进行复用，而不是频繁的创建和销毁。</p>
<p>线程池是预先创建线程的一种技术。这些线程都是处于睡眠状态，即均为启动，不消耗CPU，而只是占用较小的内存空间。当请求到来之后，缓冲池给这次请求分配一个空闲线程，把请求传入此线程中运行，进行处理。当预先创建的线程都处于运行状态，即预制线程不够，线程池可以自由创建一定数量的新线程，用于处理更多的请求。当系统比较闲的时候，也可以通过移除一部分一直处于停用状态的线程。</p>
<p><strong>线程池的注意事项</strong></p>
<p>虽然线程池是构建多线程应用程序的强大机制，但使用它并不是没有风险的。在使用线程池时需注意线程池大小与性能的关系，注意并发风险、死锁、资源不足和线程泄漏等问题。</p>
<p>1、线程池大小。多线程应用并非线程越多越好，需要根据系统运行的软硬件环境以及应用本身的特点决定线程池的大小。</p>
<ul>
<li>一般来说，如果代码结构合理的话，线程数目与CPU 数量相适合即可。</li>
<li>如果线程运行时可能出现阻塞现象，可相应增加池的大小；如有必要可采用自适应算法来动态调整线程池的大小，以提高CPU 的有效利用率和系统的整体性能。</li>
</ul>
<p>2、并发错误。多线程应用要特别注意并发错误，要从逻辑上保证程序的正确性，注意避免死锁现象的发生。<br>3、线程泄漏。这是线程池应用中一个严重的问题，当任务执行完毕而线程没能返回池中就会发生线程泄漏现象。</p>
<p><strong>线程池要点：</strong><br>1、通过判断等待的任务数量和线程池中的最大值，取最小值来判断开启多少线程来工作<br>2、实现线程池正在运行，有一个查看的功能，查看一下现在线程里面活跃的线程是多少等待的是多少？线程总共是多少，等待中多少，正在运行中多少<br>3、关闭线程</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> queue</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    自定义low版线程池，利用队列实现</div><div class="line">    利用队列容量控制线程池大小，每一个请求过来，分配一个线程对象，直至线程池资源耗尽</div><div class="line">    每一个占用资源释放后，线程池增加一个线程对象</div><div class="line">    缺点：从一开始就创建了给定数量的线程，不管是否被调用，没有请求也不会自动释放资源</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,maxsize=<span class="number">5</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        确定线程池大小，利用队列分配资源</div><div class="line">        """</div><div class="line">        self.maxsize = maxsize</div><div class="line">        self._q = queue.Queue(maxsize)</div><div class="line">        <span class="comment"># 向队列中增加线程类</span></div><div class="line">        <span class="comment"># 添加的是类不是对象，在内存中如果相同的类只占一份内存空间，并且如果这里存储的是对象的话每次都的新增都得在内存中开辟一段内存空间</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(maxsize):</div><div class="line">            self._q.put(threading.Thread)</div><div class="line">    </div><div class="line">    <span class="comment"># 从队列中获取线程对象</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_thread</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._q.get()</div><div class="line">    </div><div class="line">    <span class="comment"># 线程调用完毕，向线程池中补充新的线程对象</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_thread</span><span class="params">(self)</span>:</span></div><div class="line">        self._q.put(threading.Thread)</div><div class="line"></div><div class="line"><span class="comment"># 实例化线程池</span></div><div class="line">pool = ThreadPool(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># 测试函数，接收线程池对象参数，以便调用完成后，向线程池补充线程对象</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg,p)</span>:</span></div><div class="line">    print(arg)</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    p.add_thread()</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</div><div class="line">    t = pool.get_thread() <span class="comment"># 如果对列中是线程对象，这里的调用是不同的</span></div><div class="line">    obj = t(target=task,args=(i,pool,))</div><div class="line">    obj.start()</div></pre></td></tr></table></figure>
<h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p><code>queue.Queue</code>  先进先出队列<br><code>queue.LifoQueue</code> 后进先出队列<br><code>queue.PriorityQueue</code> 优先级队列<br><code>queue.deque</code> 双向对队</p>
<p><code>queue.Queue(maxsize)</code> 先进先出队列<br><code>maxsize</code> 最大支持的个数，不传值，表示不限制长度<br><code>put(block=True, timeout=None)</code> 放数据，是否阻塞，阻塞时的超时事件<br><code>get(block=True, timeout=None)</code> 取数据（默认阻塞）,是否阻塞，阻塞时的超时事件<br><code>qsize()</code> 真实个数<br><code>empty</code> <code>full</code> 队列是否为空，返回bool值<br><code>join,task_done</code>，阻塞进程，当队列中任务执行完毕之后，不再阻塞</p>
<ul>
<li>1、设置队列最大长度为2，put3个值，就陷入等待</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">import queue</div><div class="line"></div><div class="line">q = queue.Queue(2)</div><div class="line">q.put(11)</div><div class="line">q.put(22)</div><div class="line">q.put(33)</div><div class="line"></div><div class="line">print(q.qsize())</div><div class="line">print(q.get())</div></pre></td></tr></table></figure>
<ul>
<li>2、执行完get方法后，没有调用task_done，join阻塞</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> queue</div><div class="line">q = queue.Queue(<span class="number">2</span>)</div><div class="line">q.put(<span class="number">11</span>)</div><div class="line">q.put(<span class="number">22</span>)</div><div class="line"></div><div class="line">print(q.qsize())</div><div class="line">print(q.get())</div><div class="line"><span class="comment"># q.task_done()</span></div><div class="line">print(q.get())</div><div class="line"><span class="comment"># q.task_done()</span></div><div class="line">q.join()</div></pre></td></tr></table></figure>
<h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><p>生产请求，消费请求</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> queue</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">q = queue.Queue(<span class="number">20</span>)</div><div class="line"></div><div class="line"><span class="comment"># 生产</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">productor</span><span class="params">(arg)</span>:</span></div><div class="line">        q.put(str(arg)+<span class="string">' - baozi'</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">300</span>):</div><div class="line">    t = threading.Thread(target=productor, args=(i,))</div><div class="line">    t.start()</div><div class="line"></div><div class="line"><span class="comment"># 消费</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        print(arg, q.get())</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    t = threading.Thread(target=consumer, args=(j,))</div><div class="line">    t.start()</div></pre></td></tr></table></figure>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process</div><div class="line">import time</div><div class="line"></div><div class="line">def foo(i):</div><div class="line">    print(&quot;say hi: %s&quot; % i , time.time())</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    for i in range(5):</div><div class="line">        p = Process(target=foo,args=(i,))</div><div class="line">        p.start()</div></pre></td></tr></table></figure>
<blockquote>
<p>与线程类似，但在 PyCharm 中调试，要使用 if <strong>name</strong> == “<strong>main</strong>“<br>由于进程之间的数据需要各自持有一份，所以创建进程需要的非常大的开销。</p>
</blockquote>
<h3 id="进程数据共享"><a href="#进程数据共享" class="headerlink" title="进程数据共享"></a>进程数据共享</h3><p>Method1 ： Array</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">from multiprocessing import Process,Array</div><div class="line">temp = Array(&apos;i&apos;, [11,22,33,44])</div><div class="line"></div><div class="line">def Foo(i):</div><div class="line">    temp[i] = 100+i</div><div class="line">    for item in temp:</div><div class="line">        print(i,&apos;-----&gt;&apos;,item)</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line"></div><div class="line">    for i in range(2):</div><div class="line">        p = Process(target=Foo,args=(i,))</div><div class="line">        p.start()</div><div class="line">``` </div><div class="line"></div><div class="line">当创建进程时（非使用时），共享数据会被拿到子进程中，当进程中执行完毕后，再赋值给原值。</div></pre></td></tr></table></figure>
<p>from multiprocessing import Process<br>from multiprocessing import Array</p>
<p>def foo(i,arg):<br>    arg[i] = i + 100<br>    for item in arg:<br>        print(item)<br>    print(‘================’)</p>
<p>if <strong>name</strong> == “<strong>main</strong>“:<br>    li = Array(‘i’, 10)<br>    for i in range(10):<br>        p = Process(target=foo,args=(i,li,))</p>
<pre><code># p.daemon = True  # 与线程的setDaemon类似
p.start()
# p.join()
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Method2 ： Manage.dict()共享数据</div></pre></td></tr></table></figure>
<p>from multiprocessing import Process<br>from multiprocessing import Manager</p>
<p>def foo(i,arg):<br>    arg[i] = i + 100<br>    print(arg.values())</p>
<p>if <strong>name</strong> == “<strong>main</strong>“:<br>    obj = Manager()<br>    li = obj.dict()<br>    for i in range(10):<br>        p = Process(target=foo,args=(i,li,))<br>        p.start()<br>        p.join()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">并发</div></pre></td></tr></table></figure></p>
<p>from multiprocessing import Process<br>from multiprocessing import queues<br>from multiprocessing import Array<br>from multiprocessing import RLock, Lock, Event, Condition, Semaphore<br>import multiprocessing<br>import time</p>
<p>def foo(i,lis):<br>    lis[0] = lis[0] - 1<br>    time.sleep(1)</p>
<pre><code>print(&apos;say hi&apos;,lis[0])
</code></pre><p>if <strong>name</strong> == “<strong>main</strong>“:</p>
<pre><code># li = []
li = Array(&apos;i&apos;, 1)
li[0] = 10
for i in range(10):
    p = Process(target=foo,args=(i,li))
    p.start()
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">进程锁</div></pre></td></tr></table></figure>
<p>from multiprocessing import Process<br>from multiprocessing import Array<br>from multiprocessing import RLock, Lock, Event, Condition, Semaphore<br>import time</p>
<p>def foo(i,lis,lc):<br>    lc.acquire()<br>    lis[0] = lis[0] - 1<br>    time.sleep(1)<br>    print(‘say hi’,lis[0])<br>    lc.release()</p>
<p>if <strong>name</strong> == “<strong>main</strong>“:</p>
<pre><code># li = []
li = Array(&apos;i&apos;, 1)
li[0] = 10
lock = RLock()
for i in range(10):
    p = Process(target=foo,args=(i,li,lock))
    p.start()
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 进程池</div><div class="line"></div><div class="line">进程池内部维护一个进程序列，当使用时，则去进程池中获取一个进程，如果进程池序列中没有可供使用的进进程，那么程序就会等待，直到进程池中有可用进程为止。</div></pre></td></tr></table></figure>
<p>from multiprocessing import Pool<br>import time<br>def f1(arg):<br>    print(arg,’b’)<br>    time.sleep(5)<br>    print(arg,’a’)<br>if <strong>name</strong> == “<strong>main</strong>“:<br>    pool = Pool(5)</p>
<pre><code>for i in range(30):
    # pool.apply(func=f1,args=(i,))
    pool.apply_async(func=f1,args=(i,))

# pool.close() # 所有的任务执行完毕
time.sleep(2)
pool.terminate() # 立即终止
pool.join()
pass
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 协程</div><div class="line"></div><div class="line">线程和进程的操作是由程序触发系统接口，最后的执行者是系统；协程的操作则是程序员。</div><div class="line"></div><div class="line">协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时（保存状态，下次继续）。协程，则只使用一个线程，在一个线程中规定某个代码块执行顺序。</div><div class="line"></div><div class="line">协程的适用场景：当程序中存在大量不需要CPU的操作时（IO），适用于协程；</div></pre></td></tr></table></figure>
<p>from greenlet import greenlet</p>
<p>def test1():<br>    print(12)<br>    gr2.switch()<br>    print(34)<br>    gr2.switch()</p>
<p>def test2():<br>    print(56)<br>    gr1.switch()<br>    print(78)</p>
<p>gr1 = greenlet(test1)<br>gr2 = greenlet(test2)<br>gr1.switch()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### grevnt</div><div class="line"></div><div class="line">遇到IO操作自动切换：</div></pre></td></tr></table></figure></p>
<p>from gevent import monkey; monkey.patch_all()<br>import gevent<br>import urllib.request</p>
<p>def f(url):<br>    print(‘GET: %s’ % url)<br>    resp = urllib.request.urlopen(url)<br>    data = resp.read()<br>    print(‘%d bytes received from %s.’ % (len(data), url))</p>
<p>gevent.joinall([<br>        gevent.spawn(f, ‘<a href="https://www.python.org/" target="_blank" rel="external">https://www.python.org/</a>‘),<br>        gevent.spawn(f, ‘<a href="https://www.yahoo.com/" target="_blank" rel="external">https://www.yahoo.com/</a>‘),<br>        gevent.spawn(f, ‘<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a>‘),<br>])<br>```</p>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 操作 memcached、redis]]></title>
      <url>http://dxtywt.github.io/2016/07/17/2016-07-17-python-key-value/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> 

<h2 id="python-操作-memcached"><a href="#python-操作-memcached" class="headerlink" title="python 操作 memcached"></a>python 操作 memcached</h2><p><strong>Memcached</strong> 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。Memcached基于一个<strong>存储键/值对</strong>的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcached协议与守护进程通信。</p>
<a id="more"></a>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>1、编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yum install libevent-devel (依赖libevent)</div><div class="line">wget http://memcached.org/latest</div><div class="line">tar -zxvf memcached-1.x.x.tar.gz</div><div class="line">cd memcached-1.x.x</div><div class="line">./configure &amp;&amp; make &amp;&amp; make test &amp;&amp; sudo make install</div></pre></td></tr></table></figure>
<p>2、yum安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y memcached</div></pre></td></tr></table></figure>
<p>3、操作memcached使用python-memcached模块</p>
<pre><code>pip3 install python-memcached
</code></pre><h3 id="启动服务："><a href="#启动服务：" class="headerlink" title="启动服务："></a>启动服务：</h3><pre><code>memcached -d -m 10 -u root -l 10.10.20.205 -p 11211 -c 50 -P /tmp/memcached.pid

usage:
    -d：启动守护进程
    -m：指定分配内存大小，单位（MB）
    -u：运行memcached的用户
    -l：监听ip
    -p：监听端口，默认11211
    -P：指定pid文件
    -c：最大并发
</code></pre><h3 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> memcache</div><div class="line"></div><div class="line">mem = memcache.Client([<span class="string">'10.0.0.7:11211'</span>,], debug=<span class="keyword">True</span>)</div><div class="line">mem.set(<span class="string">"key1"</span>,<span class="string">"value1"</span>)</div><div class="line">ret = mem.get(<span class="string">'key1'</span>)</div><div class="line">print(ret)</div></pre></td></tr></table></figure>
<p><code>add(&quot;key1&quot;,&quot;value1&quot;)</code> 添加一条键值对，如果已经存在的 key，重复执行add操作异常</p>
<p><code>replace(&quot;key1&quot;,&quot;value2&quot;)</code>  修改某个key的值，如果key不存在，则异常</p>
<p><code>set(&quot;key1&quot;,&quot;value1&quot;)</code>  设置一个键值对，如果key不存在，则创建，如果key存在，则修改</p>
<p><code>set_multi({&#39;name&#39;:&#39;tom&#39;,&#39;age&#39;:&#39;1&#39;})</code>   设置多个键值对，如果key不存在，则创建，如果key存在，则修改</p>
<p><code>delete(&quot;key1&quot;)</code>  在Memcached中删除指定的一个键值对</p>
<p><code>delete_multi({&#39;name&#39;,&#39;age&#39;})</code>    在Memcached中删除指定的多个键值对</p>
<p><code>get(&quot;name&quot;)</code>            获取一个键值对</p>
<p><code>get_multi([&quot;age&quot;,&quot;name&quot;])</code>   获取多一个键值对，参数为多个key组成的list</p>
<p><code>append(&quot;name&quot;,&quot;cat&quot;)</code>   修改指定key的值，在该值 <strong><code>后面</code></strong> 追加内容</p>
<p><code>prepend(&quot;name&quot;,&quot;lovely&quot;)</code>  修改指定key的值，在该值 <code>前面</code> 插入内容</p>
<p><code>incr(&#39;age&#39;)</code>  自增，将Memcached中的某一个值增加 N （ N默认为1 ）</p>
<p><code>decr(&#39;age&#39;)</code> 自减，将Memcached中的某一个值减少 N （ N默认为1 ）</p>
<p><code>gets</code> 和 <code>cas</code> 使用gets和cas解决多client读写同一key数据的问题</p>
<pre><code>mem = memcache.Client([&apos;10.211.55.4:12000&apos;], debug=True, cache_cas=True)
v = mem.gets(&apos;product_count&apos;)
mem.cas(&apos;product_count&apos;, &quot;899&quot;)
</code></pre><p><strong>CAS协议原理如下：</strong></p>
<ul>
<li>第一步，A取出数据对象X，并获取到CAS-ID1；</li>
<li>第二步，B取出数据对象X，并获取到CAS-ID2；</li>
<li>第三步，B修改数据对象X，在写入缓存前，检查CAS-ID2与缓存空间中该数据的CAS-ID是否一致。结果是“一致”，就将修改后的带有CAS-ID2的X写入到缓存。</li>
<li>第四步，A修改数据对象Y，在写入缓存前，检查CAS-ID1与缓存空间中该数据的CAS-ID是否一致。结果是“不一致”，则拒绝写入，返回存储失败。</li>
</ul>
<blockquote>
<p>Ps：debug = True 表示运行出现错误时，现实错误信息，上线后移除该参数。</p>
</blockquote>
<h3 id="集群支持："><a href="#集群支持：" class="headerlink" title="集群支持："></a>集群支持：</h3><p>python-memcached模块原生支持集群操作，其原理是在内存维护一个主机列表，且集群中主机的权重值和主机在列表中重复出现的次数成正比</p>
<table>
<thead>
<tr>
<th style="text-align:center">主机</th>
<th style="text-align:center">权重</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10.0.0.2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">10.0.0.3</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">10.0.0.4</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>内存中主机列表：</p>
<pre><code>host_list = [&quot;10.0.0.2&quot;,&quot;10.0.0.3&quot;,&quot;10.0.0.3&quot;,&quot;10.0.0.4&quot;]
</code></pre><p>集群原理：以创建 k1 = “v1” 为例：</p>
<ul>
<li>根据算法将 k1 转换成一个数字</li>
<li>将数字和主机列表长度求余数，得到一个值 N（ 0 &lt;= N &lt; 列表长度 ）</li>
<li>上步得到的及时目标主机的在主机列表中的索引值，根据索引获取主机</li>
<li>连接主机，进行对应操作</li>
</ul>
<p>操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mems = memcache.Client([(&apos;10.0.0.2:11211&apos;,1),(&apos;10.0.0.3:11211&apos;,2),(&apos;10.0.0.4:11211&apos;,1),])</div><div class="line">mems.set(&apos;k1&apos;,&apos;v1&apos;)</div></pre></td></tr></table></figure>
<h2 id="python-操作-Redis"><a href="#python-操作-Redis" class="headerlink" title="python 操作 Redis"></a>python 操作 Redis</h2><p><strong>redis</strong> 是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<h3 id="安装：-1"><a href="#安装：-1" class="headerlink" title="安装："></a>安装：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># redis服务端</div><div class="line">wget http://download.redis.io/releases/redis-3.0.6.tar.gz</div><div class="line">tar xzf redis-3.0.6.tar.gz</div><div class="line">cd redis-3.0.6</div><div class="line">make</div><div class="line"></div><div class="line"># python操作redis api</div><div class="line">pip3 install redis</div></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code>服务端： src/redis-server
客户端： src/redis-cli
</code></pre><p>1、操作模式：</p>
<p>redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令，Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import redis</div><div class="line"></div><div class="line">r = redis.Redis(host=&apos;10.0.0.7&apos;,port=6379)</div><div class="line">r.set(&apos;foo&apos;,&apos;bar&apos;)</div><div class="line">print(r.get(&apos;foo&apos;))</div></pre></td></tr></table></figure>
<p>2、连接池：</p>
<p>redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import redis</div><div class="line"></div><div class="line">pool = redis.ConnectionPool(host=&apos;10.0.0.7&apos;,port=6379)</div><div class="line">r = redis.Redis(connection_pool=pool)</div><div class="line">r.set(&apos;foo&apos;,&apos;bar&apos;)</div><div class="line">print(r.get(&apos;foo&apos;))</div></pre></td></tr></table></figure>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="String-操作"><a href="#String-操作" class="headerlink" title="String 操作"></a>String 操作</h4><blockquote>
<p>redis中的String在在内存中按照一个name对应一个value来存储</p>
</blockquote>
<p><code>set(name, value, ex=None, px=None, nx=False, xx=False)</code> 在Redis中设置值，默认，不存在则创建，存在则修改</p>
<pre><code>参数：
    ex，过期时间（秒）
    px，过期时间（毫秒）
    nx，如果设置为True，则只有name不存在时，当前set操作才执行
    xx，如果设置为True，则只有name存在时，当前set操作才执行
</code></pre><p><code>setnx(name, value)</code> 设置值，只有name不存在时，执行设置操作（添加）</p>
<p><code>setex(self, name, value, time)</code> Set the value and expiration(过期时间，单位(s)) of a key</p>
<p><code>psetex(name, time_ms, value)</code> Set the value and expiration(过期时间，单位(ms)) in milliseconds of a key</p>
<p><code>mset(*args, **kwargs)</code> 批量设置值</p>
<p><code>get(name)</code> 获取值</p>
<p><code>mget(keys, *args)</code> 批量获取</p>
<p><code>getset(name, value)</code> 设置新值并获取原来的值</p>
<p><code>getrange(key, start, end)</code> 获取子序列，根据字节获取，非字符</p>
<p><code>setrange(name, offset, value)</code> 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）</p>
<p><code>setbit(name, offset, value)</code> 对name对应值的二进制表示的位进行操作</p>
<p><code>getbit(name, offset)</code> 获取name对应的值的二进制表示中的某位的值 （0或1）</p>
<p><code>bitcount(key, start=None, end=None)</code> 获取name对应的值的二进制表示中 1 的个数</p>
<p><code>bitop(operation, dest, *keys)</code> 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值</p>
<pre><code>bitop(&quot;AND&quot;, &apos;new_name&apos;, &apos;n1&apos;, &apos;n2&apos;, &apos;n3&apos;)
# 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中
</code></pre><p><code>strlen(name)</code> 返回name对应值的字节长度（一个汉字3个字节）</p>
<p><code>incr(self, name, amount=1)</code> 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。amount必须为整数</p>
<p><code>incrbyfloat(self, name, amount=1.0)</code> 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。amount（浮点型）</p>
<p><code>decr(self, name, amount=1)</code>  自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。</p>
<p><code>append(key, value)</code> 在redis name对应的值后面追加内容</p>
<h4 id="Hash-操作"><a href="#Hash-操作" class="headerlink" title="Hash 操作"></a>Hash 操作</h4><p><code>hset(name, key, value)</code> name对应的hash中设置一个键值对（不存在，则创建；否则，修改）</p>
<pre><code># name，redis的name
# key，name对应的hash中的key
# value，name对应的hash中的value
</code></pre><p><code>hsetnx(name, key, value)</code> 当name对应的hash中不存在当前key时则创建（相当于添加）</p>
<p><code>hmset(name, mapping)</code> 在name对应的hash中批量设置键值对</p>
<pre><code># name，redis的name
# mapping，字典，如：{&apos;k1&apos;:&apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;}
# r.hmset(&apos;xx&apos;, {&apos;k1&apos;:&apos;v1&apos;, &apos;k2&apos;: &apos;v2&apos;})
</code></pre><p><code>hget(name,key)</code> 在name对应的hash中获取根据key获取value</p>
<p><code>hmget(name, keys, *args)</code> 在name对应的hash中获取多个key的值</p>
<pre><code># name，reids对应的name
# keys，要获取key集合，如：[&apos;k1&apos;, &apos;k2&apos;, &apos;k3&apos;]
# *args，要获取的key，如：k1,k2,k3
# r.mget(&apos;xx&apos;, [&apos;k1&apos;, &apos;k2&apos;])
# r.hmget(&apos;xx&apos;, &apos;k1&apos;, &apos;k2&apos;)
</code></pre><p><code>hgetall(name)</code> 获取name对应hash的所有键值</p>
<p><code>hlen(name)</code> 获取name对应的hash中键值对的个数</p>
<p><code>hkeys(name)</code> 获取name对应的hash中所有的key的值</p>
<p><code>hvals(name)</code> 获取name对应的hash中所有的value的值</p>
<p><code>hexists(name, key)</code> 检查name对应的hash是否存在当前传入的key</p>
<p><code>hdel(name,*keys)</code> 将name对应的hash中指定key的键值对删除</p>
<p><code>hincrby(name, key, amount=1)</code> 自增name对应的hash中的指定key的值，不存在则创建key=amount</p>
<pre><code># name，redis中的name
# key， hash对应的key
# amount，自增数（整数）
</code></pre><p><code>hincrbyfloat(name, key, amount=1.0)</code> 自增name对应的hash中的指定key的值，不存在则创建key=amount</p>
<pre><code># name，redis中的name
# key， hash对应的key
# amount，自增数（浮点数）
</code></pre><p><code>hscan(name, cursor=0, match=None, count=None)</code> 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆</p>
<pre><code># name，redis的name
# cursor，游标（基于游标分批取获取数据）
# match，匹配指定key，默认None 表示所有的key
# count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数

# 第一次：cursor1, data1 = r.hscan(&apos;xx&apos;, cursor=0, match=None, count=None)
# 第二次：cursor2, data1 = r.hscan(&apos;xx&apos;, cursor=cursor1, match=None, count=None)
# ...
# 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕
</code></pre><p><code>hscan_iter(name, match=None, count=None)</code> 利用yield封装hscan创建生成器，实现分批去redis中获取数据</p>
<pre><code># match，匹配指定key，默认None 表示所有的key
# count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数

# for item in r.hscan_iter(&apos;xx&apos;):
#     print item
</code></pre><h4 id="List-操作"><a href="#List-操作" class="headerlink" title="List 操作"></a>List 操作</h4><p>redis中的List在在内存中按照一个name对应一个List来存储</p>
<p><code>lpush(name,values)</code> 在name对应的list中添加元素，每个新的元素都添加到列表的最左边</p>
<pre><code># r.lpush(&apos;oo&apos;, 11,22,33)
# 保存顺序为: 33,22,11
</code></pre><p><code>rpush(name, values)</code> 表示从右向左操作</p>
<p><code>lpushx(name,value)</code> 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边</p>
<p><code>rpushx(name, value)</code> 表示从右向左操作</p>
<p><code>llen(name)</code> name对应的list元素的个数</p>
<p><code>linsert(name, where, refvalue, value))</code> 在name对应的列表的某一个值前或后插入一个新值</p>
<pre><code># name，redis的name
# where，BEFORE或AFTER
# refvalue，标杆值，即：在它前后插入数据
# value，要插入的数据
</code></pre><p><code>r.lset(name, index, value)</code> 对name对应的list中的某一个索引位置重新赋值</p>
<pre><code># name，redis的name
# index，list的索引位置
# value，要设置的值
</code></pre><p><code>r.lrem(name, value, num)</code> 在name对应的list中删除指定的值</p>
<pre><code># name，redis的name
# value，要删除的值
# num，  num=0，删除列表中所有的指定值；
       # num=2,从前到后，删除2个；
       # num=-2,从后向前，删除2个
</code></pre><p><code>lpop(name)</code> 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素</p>
<pre><code># rpop(name) 表示从右向左操作
</code></pre><p><code>lindex(name, index)</code> 在name对应的列表中根据索引获取列表元素</p>
<p><code>lrange(name, start, end)</code> 在name对应的列表分片获取数据</p>
<pre><code># name，redis的name
# start，索引的起始位置
# end，索引结束位置
</code></pre><p><code>ltrim(name, start, end)</code> 在name对应的列表中移除没有在start-end索引之间的值</p>
<pre><code># name，redis的name
# start，索引的起始位置
# end，索引结束位置
</code></pre><p><code>rpoplpush(src, dst)</code> 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边</p>
<pre><code># src，要取数据的列表的name
# dst，要添加数据的列表的name
</code></pre><p><code>blpop(keys, timeout)</code> 将多个列表排列，按照从左到右去pop对应列表的元素</p>
<pre><code># keys，redis的name的集合
# timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞
</code></pre><p><code>brpop(keys, timeout)</code> 从右向左获取数据</p>
<p><code>brpoplpush(src, dst, timeout=0)</code> 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧</p>
<pre><code># src，取出并要移除元素的列表对应的name
# dst，要插入元素的列表对应的name
# timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞
</code></pre><p>自定义增量迭代</p>
<p>由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</p>
<ul>
<li>1、获取name对应的所有列表</li>
<li>2、循环列表</li>
</ul>
<p>但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">def list_iter(name):</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    自定义redis列表增量迭代</div><div class="line">    :param name: redis中的name，即：迭代name对应的列表</div><div class="line">    :return: yield 返回 列表元素</div><div class="line">    &quot;&quot;&quot;</div><div class="line">    list_count = r.llen(name)</div><div class="line">    for index in xrange(list_count):</div><div class="line">        yield r.lindex(name, index)</div><div class="line"> </div><div class="line"># 使用</div><div class="line">for item in list_iter(&apos;pp&apos;):</div><div class="line">    print item</div></pre></td></tr></table></figure>
<h4 id="Set-操作"><a href="#Set-操作" class="headerlink" title="Set 操作"></a>Set 操作</h4><p>Set操作，Set集合就是不允许重复的列表</p>
<p><code>sadd(name,values)</code> name对应的集合中添加元素</p>
<p><code>scard(name)</code> 获取name对应的集合中元素个数</p>
<p><code>sdiff(keys, *args)</code> 在第一个name对应的集合中且不在其他name对应的集合的元素集合</p>
<p><code>sdiffstore(dest, keys, *args)</code>  获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中</p>
<p><code>sinter(keys, *args)</code> 获取多一个name对应集合的并集</p>
<p><code>sinterstore(dest, keys, *args)</code> 获取多个name对应集合的并集，再将其加入到dest对应的集合中</p>
<p><code>sismember(name, value)</code> 检查value是否是name对应的集合的成员</p>
<p><code>smembers(name)</code> 获取name对应的集合的所有成员</p>
<p><code>smove(src, dst, value)</code> 将某个成员从一个集合中移动到另外一个集合</p>
<p><code>spop(name)</code> 从集合的右侧（尾部）移除一个成员，并将其返回</p>
<p><code>srandmember(name, numbers)</code> 从name对应的集合中随机获取 numbers 个元素</p>
<p><code>srem(name, values)</code> 在name对应的集合中删除某些值</p>
<p><code>sunion(keys, *args)</code> 获取多一个name对应的集合的并集</p>
<p><code>sunionstore(dest,keys, *args)</code> 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中</p>
<p><code>sscan(name, cursor=0, match=None, count=None)</code><br><code>sscan_iter(name, match=None, count=None)</code> 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大</p>
<h4 id="Sort-Set-操作"><a href="#Sort-Set-操作" class="headerlink" title="Sort Set 操作"></a>Sort Set 操作</h4><p>有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。</p>
<p><code>zadd(name, *args, **kwargs)</code> 在name对应的有序集合中添加元素</p>
<pre><code># zadd(&apos;zz&apos;, &apos;n1&apos;, 1, &apos;n2&apos;, 2)
# 或
# zadd(&apos;zz&apos;, n1=11, n2=22)
</code></pre><p><code>zcard(name)</code> 获取name对应的有序集合元素的数量</p>
<p><code>zcount(name, min, max)</code> 获取name对应的有序集合中分数 在 [min,max] 之间的个数</p>
<p><code>zincrby(name, value, amount)</code> 自增name对应的有序集合的 name 对应的分数</p>
<p><code>zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)</code>  按照索引范围获取name对应的有序集合的元素</p>
<pre><code># name，redis的name
# start，有序集合索引起始位置（非分数）
# end，有序集合索引结束位置（非分数）
# desc，排序规则，默认按照分数从小到大排序
# withscores，是否获取元素的分数，默认只获取元素的值
# score_cast_func，对分数进行数据转换的函数
</code></pre><p><code>zrevrange(name, start, end, withscores=False, score_cast_func=float)</code> 从大到小排序</p>
<p><code>zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)</code> 按照分数范围获取name对应的有序集合的元素</p>
<p><code>zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)</code><br> 从大到小排序</p>
<p><code>zrank(name, value)</code> 获取某个值在 name对应的有序集合中的排行（从 0 开始）</p>
<p> <code>zrevrank(name, value)</code> 从大到小排序</p>
<p><code>zrangebylex(name, min, max, start=None, num=None)</code> </p>
<p>当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员<br>对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大</p>
<pre><code># name，redis的name
# min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间
# min，右区间（值）
# start，对结果进行分片处理，索引位置
# num，对结果进行分片处理，索引后面的num个元素

例：
# ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga
# r.zrangebylex(&apos;myzset&apos;, &quot;-&quot;, &quot;[ca&quot;) 结果为：[&apos;aa&apos;, &apos;ba&apos;, &apos;ca&apos;]
</code></pre><p><code>zrevrangebylex(name, max, min, start=None, num=None)</code> 从大到小排序</p>
<p><code>zrem(name, values)</code> 删除name对应的有序集合中值是values的成员</p>
<p><code>zremrangebyrank(name, min, max)</code>  根据排行范围删除</p>
<p><code>zremrangebyscore(name, min, max)</code> 根据分数范围删除</p>
<p><code>zremrangebylex(name, min, max)</code> 根据值返回删除</p>
<p><code>zscore(name, value)</code> 获取name对应有序集合中 value 对应的分数</p>
<p><code>zinterstore(dest, keys, aggregate=None)</code> 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作,aggregate的值为:  SUM  MIN  MAX</p>
<p><code>zunionstore(dest, keys, aggregate=None)</code>  获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作,aggregate的值为:  SUM  MIN  MAX</p>
<p><code>zscan(name, cursor=0, match=None, count=None, score_cast_func=float)</code><br><code>zscan_iter(name, match=None, count=None,score_cast_func=float)</code></p>
<pre><code>同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作
</code></pre><p>　　</p>
<h4 id="其他常用操作"><a href="#其他常用操作" class="headerlink" title="其他常用操作"></a>其他常用操作</h4><p><code>delete(*names)</code> 根据删除redis中的任意数据类型</p>
<p><code>exists(name)</code> 检测redis的name是否存在</p>
<p><code>keys(pattern=&#39;*&#39;)</code> 根据模型获取redis的name</p>
<pre><code># KEYS * 匹配数据库中所有 key 。
# KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。
# KEYS h*llo 匹配 hllo 和 heeeeello 等。
# KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo
</code></pre><p><code>expire(name ,time)</code> 为某个redis的某个name设置超时时间</p>
<p><code>rename(src, dst)</code> 对redis的name重命名为</p>
<p><code>move(name, db))</code> 将redis的某个值移动到指定的db下</p>
<p><code>randomkey()</code> 随机获取一个redis的name（不删除）</p>
<p><code>type(name)</code> 获取name对应值的类型</p>
<p><code>scan(cursor=0, match=None, count=None)</code><br><code>scan_iter(match=None, count=None)</code></p>
<pre><code>同字符串操作，用于增量迭代获取key
</code></pre></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[I/O 多路复用]]></title>
      <url>http://dxtywt.github.io/2016/07/10/2016-07-10-python-day10/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> 

<h2 id="socketserver源码阅读"><a href="#socketserver源码阅读" class="headerlink" title="socketserver源码阅读"></a>socketserver源码阅读</h2><p>支持并发处理socket</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socketserver</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyServer</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="comment"># print self.request,self.client_address,self.server</span></div><div class="line">        conn = self.request</div><div class="line">        conn.sendall(<span class="string">'欢迎致电 10086，请输入1xxx,0转人工服务.'</span>)</div><div class="line">        Flag = <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> Flag:</div><div class="line">            data = conn.recv(<span class="number">1024</span>)</div><div class="line">            <span class="keyword">if</span> data == <span class="string">'exit'</span>:</div><div class="line">                Flag = <span class="keyword">False</span></div><div class="line">            <span class="keyword">elif</span> data == <span class="string">'0'</span>:</div><div class="line">                conn.sendall(<span class="string">'通过可能会被录音.balabala一大推'</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                conn.sendall(<span class="string">'请重新输入.'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    server = socketserver.ThreadingTCPServer((<span class="string">'127.0.0.1'</span>,<span class="number">8009</span>),MyServer)</div><div class="line">    server.serve_forever()</div></pre></td></tr></table></figure>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<ol>
<li>启动服务端程序</li>
</ol>
<ul>
<li><p>ThreadingTCPServer类实例化一个对象server，根据ThreadingTCPServer类的继承关系，找到该操作最终执行的构造函数</p>
</li>
<li><p>执行 TCPServer.<strong>init</strong> 方法，创建服务端Socket对象并绑定 IP 和 端口</p>
</li>
<li><p>执行 BaseServer.<strong>init</strong> 方法，将自定义的继承自SocketServer.BaseRequestHandler 的类 MyRequestHandle赋值给 self.RequestHandlerClass</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseServer</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, RequestHandlerClass)</span>:</span></div><div class="line">        <span class="string">"""Constructor.  May be extended, do not override."""</span></div><div class="line">        self.server_address = server_address</div><div class="line">        self.RequestHandlerClass = RequestHandlerClass</div><div class="line">        self.__is_shut_down = threading.Event()</div><div class="line">        self.__shutdown_request = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span><span class="params">(BaseServer)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, server_address, RequestHandlerClass, bind_and_activate=True)</span>:</span></div><div class="line">        <span class="string">"""Constructor.  May be extended, do not override."""</span></div><div class="line">        BaseServer.__init__(self, server_address, RequestHandlerClass)</div></pre></td></tr></table></figure>
<ol>
<li><p>执行 BaseServer.server_forever 方法，While 循环一直监听是否有客户端请求到达 …</p>
</li>
<li><p>当客户端连接到达服务器</p>
</li>
<li><p>执行 ThreadingMixIn.process_request 方法，创建一个 “线程” 用来处理请求</p>
</li>
<li><p>执行 ThreadingMixIn.process_request_thread 方法</p>
</li>
<li><p>执行 BaseServer.finish_request 方法，执行 self.RequestHandlerClass()  即：执行 自定义 MyRequestHandler 的构造方法（自动调用基类BaseRequestHandler的构造方法，在该构造方法中又会调用 MyRequestHandler的handle方法）</p>
</li>
</ol>
<h2 id="Python-作用域"><a href="#Python-作用域" class="headerlink" title="Python 作用域"></a>Python 作用域</h2><p>python中无块级作用域,python中以函数为作用域</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="number">1</span> == <span class="number">1</span>:</div><div class="line">    name = <span class="string">'alex'</span></div><div class="line"></div><div class="line">print(name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    name = <span class="string">'alxe'</span></div><div class="line"></div><div class="line">print(name)</div></pre></td></tr></table></figure>
<p>Python 作用域链，由内向外寻找<br>对于作用域，函数未执行之前，作用域与作用域链都已经确定了</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">name = <span class="string">'alex'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></div><div class="line">    print(name)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></div><div class="line">    name = <span class="string">'eric'</span></div><div class="line">    f1()</div><div class="line"></div><div class="line">f2()</div><div class="line">&gt;&gt;&gt;alex</div></pre></td></tr></table></figure>
<p>li = [x+1 for x in range(10)]</p>
<p>li = [lambda :x for x in range(10)]</p>
<p>执行完成，li中的元素是lambda函数体，执行 li<a href="">0</a></p>
<p>li列表中的元素是函数还是数值，取决于函数是否被执行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">li = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(i)</span>:</span></div><div class="line">        <span class="keyword">return</span> i</div><div class="line">    li.append(f1)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x=i)</span>:</span></div><div class="line">        <span class="keyword">return</span> x</div><div class="line">    li.append(f1)</div></pre></td></tr></table></figure>
<h2 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h2><p><strong>概述:</strong> 通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。</p>
<p>Linux中的 select，poll，epoll 都是IO多路复用的机制。</p>
<ul>
<li><p>select 通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写操作。</p>
<ul>
<li>支持多平台</li>
<li>单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，不过可以通过修改宏定义甚至重新编译内核的方式提升这一限制。</li>
<li>select()所维护的存储大量文件描述符的数据结构，随着文件描述符数量的增大，其复制的开销也线性增长。同时，由于网络响应时间的延迟使得大量TCP连接处于非活跃状态，但调用select()会对所有socket进行一次线性扫描，所以这也浪费了一定的开销。</li>
</ul>
</li>
<li><p>poll 本质上和select没有多大差别，但是poll没有最大文件描述符数量的限制</p>
<ul>
<li>包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。</li>
<li>select()和poll()将就绪的文件描述符告诉进程后，如果进程没有对其进行IO操作，那么下次调用select()和poll()的时候将再次报告这些文件描述符，所以它们一般不会丢失就绪的消息，这种方式称为水平触发（Level Triggered）。</li>
</ul>
</li>
<li><p>epoll </p>
<ul>
<li>epoll可以同时支持水平触发和边缘触发（Edge Triggered，只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为边缘触发），理论上边缘触发的性能要更高一些，但是代码实现相当复杂。</li>
<li>epoll同样只告知那些就绪的文件描述符，而且当我们调用epoll_wait()获得就绪文件描述符时，返回的不是实际的描述符，而是一个代表就绪描述符数量的值，你只需要去epoll指定的一个数组中依次取得相应数量的文件描述符即可，这里也使用了内存映射（mmap）技术，这样便彻底省掉了这些文件描述符在系统调用时复制的开销。</li>
<li>另一个本质的改进在于epoll采用基于事件的就绪通知方式。在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> select</div><div class="line"></div><div class="line">sk = socket.socket()</div><div class="line">sk.bind((<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>,))</div><div class="line">sk.listen(<span class="number">5</span>)</div><div class="line"></div><div class="line">inputs = [sk,]</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    rlist,w,e, = select.select(inputs, [],[],<span class="number">1</span>)</div><div class="line">    <span class="comment"># 监听sk（服务器端）对象，如果sk对象发生变化，表示有客户端来连接了，此时rlist值为【sk】</span></div><div class="line">    <span class="comment"># 监听conn对象，如果conn发生变化，表示客户端有新消息发送过来了，此时rlist的值为 【客户端】</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> rlist:</div><div class="line">        <span class="keyword">if</span> r == sk:</div><div class="line">            <span class="comment"># 新客户来连接</span></div><div class="line">            conn, address = r.accept()</div><div class="line">            <span class="comment"># conn是什么？其实socket对象</span></div><div class="line">            inputs.append(conn) </div><div class="line">            <span class="comment"># 加入监听</span></div><div class="line">            conn.sendall(bytes(<span class="string">'hello'</span>, encoding=<span class="string">'utf-8'</span>))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 有人给我发消息了</span></div><div class="line">            r.recv(<span class="number">1024</span>)</div><div class="line"></div><div class="line"><span class="comment"># 客户端</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line">sk = socket.socket()</div><div class="line">sk.connect((<span class="string">'127.0.0.1'</span>,<span class="number">9000</span>,))</div><div class="line"></div><div class="line">data = sk.recv(<span class="number">1024</span>)</div><div class="line">print(data)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    inp = input(<span class="string">"&gt;&gt;:"</span>)</div><div class="line">    sk.sendall(bytes(inp,encoding=<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">sk.close()</div></pre></td></tr></table></figure>
</the></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Socket 网络编程]]></title>
      <url>http://dxtywt.github.io/2016/07/03/2016-07-03-python-socket/</url>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> 

<h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>socket 通常也称作”套接字”，用于描述IP地址和端口，是一个通信链的句柄，应用程序通常通过”套接字”向网络发出请求或者应答网络请求。</p>
<p>TCP/IP 主机如何接入互联网，以及接入互联网的两台主机之间通信的标准</p>
<p><img src="/assets/img/day09/socket.png" alt="socket原理"></p>
<a id="more"></a>
<p><the rest="" of="" contents="" |="" 余下全文=""></the></p>
<h3 id="一、初级Demo："><a href="#一、初级Demo：" class="headerlink" title="一、初级Demo："></a>一、初级Demo：</h3><p><strong>简单交互：</strong>客户端发送，服务端返回</p>
<p><em>服务端实现</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">9090</span>)          </div><div class="line">s = socket.socket() </div><div class="line">s.bind(ip_port)</div><div class="line">s.listen(<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    conn,addr = s.accept()</div><div class="line"></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            recv_data = conn.recv(<span class="number">1024</span>)</div><div class="line">            send_data = recv_data.upper()</div><div class="line">            conn.send(send_data)</div><div class="line">        <span class="keyword">except</span> Exception:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    conn.close()</div></pre></td></tr></table></figure>
<p><em>客户端实现</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">ip_port = (<span class="string">'127.0.0.1'</span>,<span class="number">9090</span>)</div><div class="line">s = socket.socket()</div><div class="line">s.connect(ip_port)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    send_data = input(<span class="string">"&gt;&gt;:"</span>).strip()</div><div class="line">    <span class="keyword">if</span> send_data == <span class="string">'exit'</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> send_data:</div><div class="line">        <span class="keyword">continue</span></div><div class="line"></div><div class="line">    s.send(bytes(send_data,encoding=<span class="string">'utf8'</span>))</div><div class="line">    recv_data = s.recv(<span class="number">1024</span>)</div><div class="line">    print(recv_data)</div><div class="line"></div><div class="line">s.close()</div></pre></td></tr></table></figure>
<p>小结：<br>1、基于python3.5版本的socket只能收发字节（python2.7可以收发字符串）<br>2、服务端始终保持监听状态，客户端退出，服务端无影响<br>3、s.accept() 和 s.recv()是阻塞的（基于链接正常的情况下）<br>4、listen(n) n代表能挂起的链接数，如果n=1,代表可以链接一个，挂起一个，第三个则拒绝<br>5、服务端出现端口冲突</p>
<p><strong>功能详解：</strong></p>
<p><code>sk.bind(address)</code> 将套接字绑定到地址。address地址的格式取决于地址族。在AF_INET下，以元组（host,port）的形式表示地址。</p>
<p><code>sk.listen(backlog)</code> 开始监听传入连接。backlog指定在拒绝连接之前，可以挂起的最大连接数量。<br>（backlog等于5，表示内核已经接到了连接请求，但服务器还没有调用accept进行处理的连接个数最大为5，这个值不能无限大，因为要在内核中维护连接队列）</p>
<p><code>sk.setblocking(bool)</code> 是否阻塞（默认True），如果设置False，那么accept和recv时一旦无数据，则报错。</p>
<p><code>sk.accept()</code> 接受连接并返回（conn,address）,其中conn是新的套接字对象，可以用来接收和发送数据。address是连接客户端的地址。接收TCP 客户的连接（阻塞式）等待连接的到来</p>
<p><code>sk.connect(address)</code> 连接到address处的套接字。一般，address的格式为元组（hostname,port）,如果连接出错，返回socket.error错误。</p>
<p><code>sk.connect_ex(address)</code> 同上，只不过会有返回值，连接成功时返回 0 ，连接失败时候返回编码，例如：10061</p>
<p><code>sk.close()</code> 关闭套接字</p>
<p><code>sk.recv(bufsize[,flag])</code> 接受套接字的数据。数据以字符串形式返回，bufsize指定最多可以接收的数量。flag提供有关消息的其他信息，通常可以忽略。</p>
<p><code>sk.recvfrom(bufsize[.flag])</code> 与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</p>
<p><code>sk.send(string[,flag])</code> 将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。即：可能未将指定内容全部发送。</p>
<p><code>sk.sendall(string[,flag])</code> 将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。(内部通过递归调用send，将所有内容发送出去。)</p>
<p><code>sk.sendto(string[,flag],address)</code> 将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。该函数主要用于UDP协议。</p>
<p><code>sk.settimeout(timeout)</code> 设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 client 连接最多等待5s ）</p>
<p><code>sk.getpeername()</code> 返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</p>
<p><code>sk.getsockname()</code> 返回套接字自己的地址。通常是一个元组(ipaddr,port)</p>
<p><code>sk.fileno()</code> 套接字的文件描述符</p>
<h2 id="socketserver"><a href="#socketserver" class="headerlink" title="socketserver"></a>socketserver</h2></excerpt>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PIL 图像处理模块]]></title>
      <url>http://dxtywt.github.io/2016/06/30/2016-06-30-python-image/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<h3 id="读取图片信息"><a href="#读取图片信息" class="headerlink" title="读取图片信息"></a>读取图片信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">    </div><div class="line">img = Image.open(<span class="string">"avatar.jpg"</span>)</div><div class="line">print(img.size,img.format,img.mode) <span class="comment"># (500, 500) JPEG RGB</span></div></pre></td></tr></table></figure>
<ul>
<li>format : 识别图像的源格式，如果该文件不是从文件中读取的，则被置为 None 值。</li>
<li>size : 返回的一个元组，有两个元素，其值为象素意义上的宽和高。</li>
<li>mode : RGB（true color image），此外还有，L（luminance），CMTK（pre-press image）。</li>
</ul>
<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="图片大小、方向调整"><a href="#图片大小、方向调整" class="headerlink" title="图片大小、方向调整"></a>图片大小、方向调整</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">    </div><div class="line">img = Image.open(<span class="string">"avatar.jpg"</span>)</div><div class="line">img.resize((<span class="number">128</span>, <span class="number">128</span>))                     <span class="comment"># 调整图片大小</span></div><div class="line">img.rotate(<span class="number">45</span>)                             <span class="comment"># 逆时针旋转 45 度角。</span></div><div class="line">img.transpose(Image.FLIP_LEFT_RIGHT)       <span class="comment"># 左右对换。</span></div><div class="line">img.transpose(Image.FLIP_TOP_BOTTOM)       <span class="comment"># 上下对换。</span></div><div class="line">img.transpose(Image.ROTATE_90)             <span class="comment"># 旋转 90 度角。</span></div><div class="line">img.transpose(Image.ROTATE_180)            <span class="comment"># 旋转 180 度角。</span></div><div class="line">img.transpose(Image.ROTATE_270)            <span class="comment"># 旋转 270 度角。</span></div><div class="line">img.save(<span class="string">"./output.jpg"</span>,<span class="string">"jpeg"</span>)            <span class="comment"># 保存</span></div><div class="line">img.show()                                 <span class="comment"># 查看图片</span></div></pre></td></tr></table></figure>
<h3 id="指定坐标截取图像"><a href="#指定坐标截取图像" class="headerlink" title="指定坐标截取图像"></a>指定坐标截取图像</h3><p>crop() : 从图像中提取出某个矩形大小的图像。它接收一个四元素的元组作为参数，各元素为（left, upper, right, lower），坐标系统的原点（0, 0）是左上角。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">box = (<span class="number">200</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">300</span>)                    <span class="comment"># 坐标</span></div><div class="line">region = img.crop(box)                     <span class="comment"># 截取到的图像对象</span></div><div class="line">img.paste(region,box)                      <span class="comment"># 粘贴region到img指定位置</span></div></pre></td></tr></table></figure>
<h3 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageFont,ImageDraw</div><div class="line"></div><div class="line">draw = ImageDraw.Draw(img)                                       <span class="comment"># 绘图对象</span></div><div class="line">font_size = <span class="number">80</span>                                                   <span class="comment"># 生成字体大小</span></div><div class="line">font = ImageFont.truetype(<span class="string">"G:\Downloads\consola.ttf"</span>,font_size)  <span class="comment"># 指定字体与大小</span></div><div class="line"></div><div class="line">draw.ellipse((<span class="number">400</span>,<span class="number">0</span>,<span class="number">500</span>,<span class="number">100</span>),fill = <span class="string">"red"</span>)                       </div><div class="line"><span class="comment"># (400,0,500,100)确定圆的边界，fill指定填充颜色</span></div><div class="line"></div><div class="line">draw.arc((<span class="number">0</span>,<span class="number">0</span>,width<span class="number">-1</span>,height<span class="number">-1</span>),<span class="number">0</span>,<span class="number">360</span>,fill=<span class="number">255</span>)                  </div><div class="line"><span class="comment"># 说明：(0,0,width-1,height-1)指定了所画弧线的界限；0,360是所画弧线的起始角度和终止角度；fill=255指定了所画线的颜色</span></div><div class="line"></div><div class="line">draw.text((img.size[<span class="number">0</span>]<span class="number">-70</span>,<span class="number">16</span>),<span class="string">"5"</span>,(<span class="number">256</span>,<span class="number">256</span>,<span class="number">256</span>),font=font)       </div><div class="line"><span class="comment"># (img.size[0]-70,16)确定坐标；"5"文字内容；(256,256,256)文本颜色；font=font 字体属性</span></div><div class="line"></div><div class="line">img.save(<span class="string">"./output.jpg"</span>,<span class="string">"jpeg"</span>)                                  <span class="comment"># 保存,写入文件</span></div></pre></td></tr></table></figure>
<p>生成空白图像文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">blank = Image.new(<span class="string">"RGB"</span>,[<span class="number">1024</span>,<span class="number">768</span>],<span class="string">"white"</span>)</div><div class="line">blank.save(<span class="string">'circle.jpg'</span>)</div></pre></td></tr></table></figure>
<p>参考：<a href="http://blog.csdn.net/dou_co/article/details/17618319" target="_blank" rel="external">http://blog.csdn.net/dou_co/article/details/17618319</a></p>
</the>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[装饰器]]></title>
      <url>http://dxtywt.github.io/2016/05/03/opration/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>@ + 函数名</p>
<p>功能：</p>
<ol>
<li>自动执行函数,并且将其下面的函数名当做参数传递</li>
<li>将函数返回值，重新赋值给其下面的函数<a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

</the></li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">()</span>:</span></div><div class="line">        print(<span class="string">'before'</span>)</div><div class="line">        ret = func()</div><div class="line">        print(<span class="string">'after'</span>)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"><span class="meta">@wrapper</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'foo'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'ABCD'</span></div><div class="line"></div><div class="line">r = foo()</div><div class="line">print(r)</div><div class="line"></div><div class="line"><span class="comment">#复杂参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(*args,**kargs)</span>:</span></div><div class="line">    print(<span class="string">'before'</span>)</div><div class="line">    ret = func(*args,**kargs)</div><div class="line">    print(<span class="string">'after'</span>)</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"><span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@wrapper</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name)</span>:</span></div><div class="line">    print(name)</div><div class="line">    <span class="keyword">return</span> <span class="string">'ABCD'</span></div></pre></td></tr></table></figure>
<h2 id="双层装饰器"><a href="#双层装饰器" class="headerlink" title="双层装饰器"></a>双层装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">USER_INFO = &#123;<span class="string">'is_login'</span>:<span class="string">''</span>,<span class="string">'is_admin'</span>:<span class="string">''</span>&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_login</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> USER_INFO.get(<span class="string">'is_login'</span>,<span class="keyword">None</span>):</div><div class="line">            ret = func(*args,**kwargs)</div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"请登录"</span>)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_admin</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> USER_INFO.get(<span class="string">'is_admin'</span>,<span class="keyword">None</span>):</div><div class="line">            ret = func(*args,**kwargs)</div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"无权限"</span>)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    user = input(<span class="string">"username:"</span>)</div><div class="line">    <span class="keyword">if</span> user == <span class="string">'admin'</span>:</div><div class="line">        USER_INFO[<span class="string">'is_login'</span>] = <span class="keyword">True</span></div><div class="line">        USER_INFO[<span class="string">'is_admin'</span>] = <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        USER_INFO[<span class="string">'is_login'</span>] = <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="meta">@is_login</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"home"</span>)</div><div class="line"></div><div class="line"><span class="meta">@is_login</span></div><div class="line"><span class="meta">@is_admin</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">"hello"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        choice = input(<span class="string">"1.登录\n2.查看\n3.管理\n输入："</span>)</div><div class="line">        <span class="keyword">if</span> choice == <span class="string">'1'</span>:</div><div class="line">            login()</div><div class="line">        <span class="keyword">elif</span> choice == <span class="string">'2'</span>:</div><div class="line">            home()</div><div class="line">        <span class="keyword">elif</span> choice == <span class="string">'3'</span>:</div><div class="line">            index()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>双层装饰器解析、执行顺序<br><img src="/assets/img//双层装饰器.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[day01-python基础知识]]></title>
      <url>http://dxtywt.github.io/2016/04/20/2016-04-20-python-basic/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><pre><code>变量名只能是 字母、数字或下划线的任意组合
变量名的第一个字符不能是数字

以下选用一种：
下划线连接
    name_of_my_son
驼峰语法
    NameOfMySon
</code></pre><a id="more"></a>
<the rest="" of="" contents="" |="" 余下全文="">

<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><pre><code>单行：#
多行：
    &quot;&quot;&quot;
    messages
    messages
    &quot;&quot;&quot;
</code></pre><h3 id="读取用户输入"><a href="#读取用户输入" class="headerlink" title="读取用户输入"></a>读取用户输入</h3><p>python2：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">user_input = raw_input()</div><div class="line"><span class="keyword">print</span> user_input</div><div class="line"></div><div class="line">python2 调用input,直接输入字符串，会报未定义错误</div><div class="line">    &gt;&gt;&gt; user_input = raw_input(<span class="string">"name:"</span>)</div><div class="line">    name:tw</div><div class="line">    &gt;&gt;&gt; user_input = input(<span class="string">"name:"</span>)</div><div class="line">    name:ij</div><div class="line">    Traceback (most recent call last):</div><div class="line">      File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">      File <span class="string">"&lt;string&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    NameError: name <span class="string">'ij'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"></div><div class="line">    &gt;&gt;&gt; user_input = input(<span class="string">"name:"</span>)</div><div class="line">    name:<span class="string">'jack'</span></div><div class="line">    &gt;&gt;&gt; <span class="keyword">print</span> user_input</div><div class="line">    jack</div></pre></td></tr></table></figure>
<p>python3:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">user_input = input(<span class="string">""</span>)</div><div class="line">print(user_input)</div><div class="line"><span class="comment"># input 读入默认为字符串类型</span></div></pre></td></tr></table></figure>
<h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">name = input(<span class="string">"name:"</span>)</div><div class="line">age = int(input(<span class="string">"age:"</span>))</div><div class="line">job = input(<span class="string">"job:"</span>)</div><div class="line"></div><div class="line">msg = <span class="string">'''</span></div><div class="line">information of user %s :</div><div class="line">-------------------------</div><div class="line">name : %s</div><div class="line">age : %d</div><div class="line">job : %s</div><div class="line">-------------------------</div><div class="line">''' % (name,name,age,job)</div><div class="line"></div><div class="line">print(msg)</div></pre></td></tr></table></figure>
<h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> getpass</div><div class="line">passwd = getpass.getpass(<span class="string">"password: "</span>)</div><div class="line">pycharm 调试会显示</div><div class="line"></div><div class="line">os模块</div><div class="line">    <span class="keyword">import</span> os</div><div class="line">    os.system(<span class="string">"ls"</span>)</div><div class="line">    os.mkdir(<span class="string">'test'</span>)</div><div class="line">    <span class="comment">#记录执行结果</span></div><div class="line">    cmd_res = os.popen(<span class="string">'ls'</span>).read()</div><div class="line"></div><div class="line">sys模块</div><div class="line">    <span class="keyword">import</span> sys</div><div class="line">    print(sys.path)</div></pre></td></tr></table></figure>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><pre><code>数字
    整型 int
    浮点型 float
布尔值
    True
    False
字符串
    str
列表
    list li = [aa,bb,cc]
元组
    tuple tmp = (aa,bb,cc)
字典
    dict di = {k1:v1,k2:v2}
</code></pre><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><pre><code>简单登录验证
不具体提示用户名或密码的错误信息，提升安全性
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">user = <span class="string">"jack"</span></div><div class="line">password = <span class="string">"123456"</span></div><div class="line"></div><div class="line">username = input(<span class="string">"Username: "</span>)</div><div class="line">passwd = input(<span class="string">"Passwd: "</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> username == user:</div><div class="line">    print(<span class="string">"user is corrent"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> passwd == password:</div><div class="line">        print(<span class="string">"welcome login"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"passwd wrong"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"user is not exsits!"</span>)</div><div class="line"></div><div class="line"><span class="comment">#高效模式</span></div><div class="line"><span class="keyword">if</span> username == user <span class="keyword">and</span> passwd == password:</div><div class="line">    print(<span class="string">"welcome login"</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">"Invalid username or password..."</span>)</div></pre></td></tr></table></figure>
<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>#猜数游戏</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">30</span></div><div class="line">flag = <span class="keyword">True</span></div><div class="line"><span class="keyword">while</span> flag:</div><div class="line">    <span class="keyword">try</span>:  <span class="comment">#包在try块中，防止输入非数字报错退出</span></div><div class="line">        guess_num = int(input(<span class="string">"num: "</span>))</div><div class="line">        <span class="keyword">if</span> guess_num == age:</div><div class="line">            print(<span class="string">"you got it!"</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">elif</span> guess_num &gt; age:</div><div class="line">            print(<span class="string">"think small"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"think big"</span>)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(e)</div><div class="line">        </div><div class="line">count = <span class="number">0</span></div><div class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</div><div class="line">    count += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> count % <span class="number">2</span> != <span class="number">0</span>:</div><div class="line">        print(<span class="string">"%d 是奇数"</span> % count)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    <span class="keyword">if</span> count == <span class="number">7</span>:</div><div class="line">        print(<span class="string">"bye"</span>)</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">age = <span class="number">30</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    <span class="keyword">if</span> i&lt;<span class="number">3</span>:</div><div class="line">        guess_num = int(input(<span class="string">"num: "</span>))</div><div class="line">        <span class="keyword">if</span> guess_num == age:</div><div class="line">            print(<span class="string">"you got it!"</span>)</div><div class="line">            <span class="keyword">break</span></div><div class="line">        <span class="keyword">elif</span> guess_num &gt; age:</div><div class="line">            print(<span class="string">"think small"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">"think big"</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"try too many times!"</span>)</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></the>]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://dxtywt.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://dxtywt.github.io/about/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
